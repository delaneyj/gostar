// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package {{.Namespace.Name}} {{.Element.Name}} is generated from configuration file.
// Description:
package elements

import(
    "fmt"
    "time"
    "github.com/igrmk/treemap/v2"
    "github.com/goccy/go-json"
    "github.com/samber/lo"
)

{{ .Element.Description | comments}}
{{ $elUpper := .Element.Name | upper | replace "-" "_" -}}
{{ $elStructName := printf "%s%sElement" .Namespace.Prefix $elUpper -}}
type {{$elStructName}} struct {
    *Element
}

// Create a new {{$elStructName}} element.
// This will create a new element with the tag
// "{{.Element.Tag}}" during rendering.
func {{if .Namespace.Prefix}}{{.Namespace.Prefix}}_{{end}}{{$elUpper}}({{if not .Element.NoChildren}}children ...ElementRenderer{{end}}) *{{$elStructName}} {
    e := NewElement("{{.Element.Tag}}", {{if not .Element.NoChildren}}children...{{end}})
    e.IsSelfClosing = {{.Element.NoChildren}}
    {{if not .Element.NoChildren}}e.Descendants = children{{end}}

    return &{{$elStructName}}{ Element: e }
}

func (e *{{$elStructName }}) Children(children ...ElementRenderer) *{{$elStructName}} {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *{{$elStructName }}) IfChildren(condition bool, children ...ElementRenderer) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *{{$elStructName }}) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *{{$elStructName}}) Attr(name string, value string) *{{$elStructName}} {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set(name, value)
	return e
}

func (e *{{$elStructName}}) Attrs(attrs ...string) *{{$elStructName}} {
	if len(attrs)%2 != 0 {
		panic("attrs must be a multiple of 2")
	}
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for i := 0; i < len(attrs); i += 2 {
		k := attrs[i]
		v := attrs[i+1]
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *{{$elStructName}}) AttrsMap(attrs map[string]string) *{{$elStructName}} {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for k, v := range attrs {
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *{{$elStructName }}) Text(text string) *{{$elStructName}} {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *{{$elStructName }}) TextF(format string, args ...any) *{{$elStructName}} {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *{{$elStructName }}) IfText(condition bool, text string) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, Text(text))
    }
    return e
}

func (e *{{$elStructName }}) IfTextF(condition bool, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
    }
    return e
}

func (e *{{$elStructName }}) Escaped(text string) *{{$elStructName}} {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *{{$elStructName }}) IfEscaped(condition bool, text string) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, Escaped(text))
    }
    return e
}

func (e *{{$elStructName }}) EscapedF(format string, args ...any) *{{$elStructName}} {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *{{$elStructName }}) IfEscapedF(condition bool, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, EscapedF(format, args...))
    }
    return e
}

func (e *{{$elStructName}}) CustomData(key, value string) *{{$elStructName}} {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *{{$elStructName}}) IfCustomData(condition bool, key, value string) *{{$elStructName}} {
    if condition {
        e.CustomData(key, value)
    }
    return e
}

func (e *{{$elStructName}}) CustomDataF(key, format string, args ...any) *{{$elStructName}} {
    return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *{{$elStructName}}) IfCustomDataF(condition bool, key, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.CustomData(key, fmt.Sprintf(format, args...))
    }
    return e
}

func (e *{{$elStructName}}) CustomDataRemove(key string) *{{$elStructName}} {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}

{{range .Element.Attributes}}
    {{ .Description | comments }}
    {{ if .Type | attrIsString -}}
        func(e *{{$elStructName}}) {{.Name}}(s string) *{{$elStructName}}{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("{{.Key}}", s)
            return e
        }

        func(e *{{$elStructName}}) {{.Name}}F(format string, args ...any) *{{$elStructName}}{
            return e.{{.Name}}(fmt.Sprintf(format, args...))
        }

        func(e *{{$elStructName}}) If{{.Name}}(condition bool, s string) *{{$elStructName}}{
            if condition {
                e.{{.Name}}(s)
            }
            return e
        }

        func(e *{{$elStructName}}) If{{.Name}}F(condition bool, format string, args ...any) *{{$elStructName}}{
            if condition {
                e.{{.Name}}(fmt.Sprintf(format, args...))
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove(s string) *{{$elStructName}}{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("{{.Key}}")
            return e
        }

        func(e *{{$elStructName}}) {{.Name}}RemoveF(format string, args ...any) *{{$elStructName}}{
            return e.{{.Name}}Remove(fmt.Sprintf(format, args...))
        }


    {{ else if .Type | attrIsDelimited -}}
        func(e *{{$elStructName}}) {{.Name}}(s ...string) *{{$elStructName}}{
            if e.DelimitedStrings == nil {
                e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
            }
            ds, ok := e.DelimitedStrings.Get("{{.Key}}")
            if !ok {
                ds = NewDelimitedBuilder[string]("{{.Type.Type.Delimited}}")
                e.DelimitedStrings.Set("{{.Key}}", ds)
            }
            ds.Add(s...)
            return e
        }

        func(e *{{$elStructName}}) If{{.Name}}(condition bool, s ...string) *{{$elStructName}}{
            if condition {
                e.{{.Name}}(s...)
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove(s ...string) *{{$elStructName}}{
            if e.DelimitedStrings == nil {
                return e
            }
            ds, ok := e.DelimitedStrings.Get("{{.Key}}")
            if !ok {
                return e
            }
            ds.Remove(s ...)
            return e
        }

    {{ else if .Type | attrIsKV -}}
        func (e *{{$elStructName}}) {{.Name}}F(k string, format string, args ...any) *{{$elStructName}} {
            return e.{{.Name}}(k, fmt.Sprintf(format, args...))
        }

        func (e *{{$elStructName}}) If{{.Name}}(condition bool, k string, v string) *{{$elStructName}} {
            if condition {
                e.{{.Name}}(k, v)
            }
            return e
        }

        func (e *{{$elStructName}}) {{.Name}}(k string, v string) *{{$elStructName}} {
            if e.KVStrings == nil {
                e.KVStrings = treemap.New[string,*KVBuilder]()
            }
            kv, ok := e.KVStrings.Get("{{.Key}}")
            if !ok {
                kv = NewKVBuilder("{{.Type.Type.Kv.KeyValueDelimiter}}", "{{.Type.Type.Kv.PairDelimiter}}")
                e.KVStrings.Set("{{.Key}}", kv)
            }
            kv.Add(k, v)
            return e
        }

        func (e *{{$elStructName}}) If{{.Name}}F(condition bool, k string, format string, args ...any) *{{$elStructName}} {
            if condition {
                e.{{.Name}}(k, fmt.Sprintf(format, args...))
            }
            return e
        }

        // Add the attributes in the map to the element.
        func (e *{{$elStructName}}) {{.Name}}Map(m map[string]string) *{{$elStructName}} {
            if e.KVStrings == nil {
                e.KVStrings = treemap.New[string,*KVBuilder]()
            }
            kv, ok := e.KVStrings.Get("{{.Key}}")
            if !ok {
                kv = NewKVBuilder("{{.Type.Type.Kv.KeyValueDelimiter}}", "{{.Type.Type.Kv.PairDelimiter}}")
                e.KVStrings.Set("{{.Key}}", kv)
            }
            for k, v := range m {
                kv.Add(k, v)
            }
            return e
        }

        // Add pairs of attributes to the element.
        func (e *{{$elStructName}}) {{.Name}}Pairs(pairs ...string) *{{$elStructName}} {
            if len(pairs) % 2 != 0 {
                panic("Must have an even number of pairs")
            }
            if e.KVStrings == nil {
                e.KVStrings = treemap.New[string,*KVBuilder]()
            }
            kv, ok := e.KVStrings.Get("{{.Key}}")
            if !ok {
                kv = NewKVBuilder("{{.Type.Type.Kv.KeyValueDelimiter}}", "{{.Type.Type.Kv.PairDelimiter}}")
                e.KVStrings.Set("{{.Key}}", kv)
            }

            for i := 0; i < len(pairs); i += 2 {
                kv.Add(pairs[i], pairs[i+1])
            }

            return e
        }

        func (e *{{$elStructName}}) If{{.Name}}Pairs(condition bool, pairs ...string) *{{$elStructName}} {
            if condition {
                e.{{.Name}}Pairs(pairs...)
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func (e *{{$elStructName}}) {{.Name}}Remove(keys ...string) *{{$elStructName}} {
            if e.KVStrings == nil {
                return e
            }
            kv, ok := e.KVStrings.Get("{{.Key}}")
            if !ok {
                return e
            }
            for _, k := range keys {
                kv.Remove(k)
            }
            return e
        }

    {{ else if .Type | attrIsChoices -}}
        {{ $choicePrefix := (printf "%s%s%s" $.Namespace.Prefix ($.Element.Name | pascal) (.Key | pascal)) -}}
        func(e *{{$elStructName}}) {{.Name}}(c {{$choicePrefix}}Choice) *{{$elStructName}}{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("{{.Key}}", string(c))
            return e
        }

        type {{$choicePrefix}}Choice string
        const(
        {{ range $i, $choice := .Type.Type.Choices.Choices -}}
            {{if .Description }}{{ .Description | comments  }}{{end}}
            {{$choicePrefix}}_{{if not .Name}}empty{{else}}{{ .Name | replace "/" "_" | replace "-" "_" | replace ":" "_" | replace "." "_" | trim}}{{end}} {{$choicePrefix}}Choice = "{{.Name}}"
        {{ end -}}
        )

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove(c {{$choicePrefix}}Choice) *{{$elStructName}}{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("{{.Key}}")
            return e
        }
        {{ else if .Type | attrIsInt -}}

        func(e *{{$elStructName}}) {{.Name}}(i int) *{{$elStructName}}{
            if e.IntAttributes == nil {
                e.IntAttributes = treemap.New[string,int]()
            }
            e.IntAttributes.Set("{{.Key}}", i)
            return e
        }

        func (e *{{$elStructName}}) If{{.Name}}(condition bool, i int) *{{$elStructName}} {
            if condition {
                e.{{.Name}}(i)
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove(i int) *{{$elStructName}}{
            if e.IntAttributes == nil {
                return e
            }
            e.IntAttributes.Del("{{.Key}}")
            return e
        }
        {{ else if .Type | attrIsNumber -}}
        func(e *{{$elStructName}}) {{.Name}}(f float64) *{{$elStructName}}{
            if e.FloatAttributes == nil {
                e.FloatAttributes = treemap.New[string,float64]()
            }
            e.FloatAttributes.Set("{{.Key}}", f)
            return e
        }

        func (e *{{$elStructName}}) If{{.Name}}(condition bool, f float64) *{{$elStructName}} {
            if condition {
                e.{{.Name}}(f)
            }
            return e
        }

    {{ else if .Type | attrIsBool -}}
        func(e *{{$elStructName}}) {{.Name}}() *{{$elStructName}}{
            e.{{.Name}}Set(true)
            return e
        }

        func(e *{{$elStructName}}) If{{.Name}}(condition bool) *{{$elStructName}} {
            if condition {
                e.{{.Name}}Set(true)
            }
            return e
        }

        // Set the attribute {{.Name}} to the value b explicitly.
        func(e *{{$elStructName}}) {{.Name}}Set(b bool) *{{$elStructName}}{
            if e.BoolAttributes == nil {
                e.BoolAttributes = treemap.New[string,bool]()
            }
            e.BoolAttributes.Set("{{.Key}}", b)
            return e
        }

        func (e *{{$elStructName}}) IfSet{{.Name}}(condition bool, b bool) *{{$elStructName}} {
            if condition {
                e.{{.Name}}Set(b)
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove(b bool) *{{$elStructName}}{
            if e.BoolAttributes == nil {
                return e
            }
            e.BoolAttributes.Del("{{.Key}}")
            return e
        }

    {{ else if .Type | attrIsRune -}}
        func(e *{{$elStructName}}) {{.Name}}(r rune) *{{$elStructName}}{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("{{.Key}}", string(r))
            return e
        }

        func(e *{{$elStructName}}) If{{.Name}}(condition bool, r rune) *{{$elStructName}}{
            if condition {
                e.{{.Name}}(r)
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove() *{{$elStructName}}{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("{{.Key}}")
            return e
        }

    {{ else if .Type | attrIsDuration -}}
        func(e *{{$elStructName}}) {{.Name}}(d time.Duration) *{{$elStructName}}{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("{{.Key}}", d.String())
            return e
        }

        func(e *{{$elStructName}}) If{{.Name}}(condition bool, d time.Duration) *{{$elStructName}}{
            if condition {
                e.{{.Name}}(d)
            }
            return e
        }

        // Remove the attribute {{.Name}} from the element.
        func(e *{{$elStructName}}) {{.Name}}Remove() *{{$elStructName}}{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("{{.Key}}")
            return e
        }

    {{ else if .Type | attrIsCustom -}}
        {{ $custom := .Type.Type.Custom -}}
        {{ $customType := $custom.Type}}
        {{ $modTypeName := printf "%s%s%sMod" $.Namespace.Prefix ($.Element.Name | pascal) (.Key | pascal) -}}
        {{ if $custom.Modifiers -}}
            type {{$modTypeName}} customDataKeyModifier

            {{ range $i, $mod := $custom.Modifiers -}}
            {{ $modType := $mod.Type.Type.Custom.Type }}
            {{ $mod.Description | comments }}
            func {{$modTypeName}}{{$mod.Name | pascal}}(
                {{- if $modType | attrIsDuration }}
                    d time.Duration,
                {{- else if $modType | attrIsString }}
                    s string,
                {{- else if $modType | attrIsBool }}
                    b bool,
                {{- else if $modType | attrIsInt }}
                    i int,
                {{- else if $modType | attrIsNumber }}
                    f float64,
                {{- else if $modType | attrIsRune }}
                    r rune,
                {{ else -}}
                    !!!No handler for type {{$modType}}.
                {{end }}
            ) {{$modTypeName}} {
                return func() string {
                    {{- if $modType | attrIsDuration -}}
                        return fmt.Sprintf("{{$mod.Prefix}}%d{{$mod.Suffix}}", d.Milliseconds())
                    {{- else if $modType | attrIsString -}}
                        return fmt.Sprintf("{{$mod.Prefix}}%s{{$mod.Suffix}}", s)
                    {{- else if $modType | attrIsBool -}}
                        return fmt.Sprintf("{{$mod.Prefix}}%t{{$mod.Suffix}}", b)
                    {{- else if $modType | attrIsInt -}}
                        return fmt.Sprintf("{{$mod.Prefix}}%d{{$mod.Suffix}}", i)
                    {{- else if $modType | attrIsNumber -}}
                        return fmt.Sprintf("{{$mod.Prefix}}%f{{$mod.Suffix}}", f)
                    {{- else if $modType | attrIsRune -}}
                        return fmt.Sprintf("{{$mod.Prefix}}%c{{$mod.Suffix}}", r)
                    {{- else -}}
                        !!!No handler for type {{$modType}}.
                    {{end}}
                }
            }
            {{end}}
        {{ end -}}
        {{ if $customType | attrIsString -}}
            func(e *{{$elStructName}}) {{.Name}}({{if $custom.HasKey}}key string, {{end}}expression string{{if $custom.Modifiers}}, modifiers ...{{$modTypeName}}{{end}}) *{{$elStructName}}{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                {{if $custom.HasKey}}
                key =  fmt.Sprintf("data-{{.Key}}-%s", key)
                {{else}}
                key := "data-{{.Key}}"
                {{end}}
                {{- if $custom.Modifiers}}
                customMods := lo.Map(modifiers, func(m {{$modTypeName}}, i int) customDataKeyModifier  {
                    return customDataKeyModifier(m)
                })
                key = customDataKey(key{{if $custom.Modifiers}}, customMods...{{end}})
                {{- end}}
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *{{$elStructName}}) If{{.Name}}(condition bool, {{if $custom.HasKey}}key string, {{end}}expression string{{if $custom.Modifiers}}, modifiers ...{{$modTypeName}}{{end}}) *{{$elStructName}}{
                if condition {
                    e.{{.Name}}({{if $custom.HasKey}}key, {{end}} expression, {{if $custom.Modifiers}} modifiers...{{end}})
                }
                return e
            }

            // Remove the attribute {{.Name}} from the element.
            func(e *{{$elStructName}}) {{.Name}}Remove() *{{$elStructName}}{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-{{.Key}}")
                return e
            }

        {{ else if $customType | attrIsJson -}}
            func(e *{{$elStructName}}) {{.Name}}(v any{{if $custom.Modifiers}}, modifiers ...{{$modTypeName}}{{end}}) *{{$elStructName}}{
                if e.CustomDataAttributes == nil {
                    e.CustomDataAttributes = treemap.New[string,string]()
                }
                b, err := json.Marshal(v)
                if err != nil {
                    panic(err)
                }
                e.CustomDataAttributes.Set("{{.Key}}", html.EscapeString(string(b)))

                {{- if $custom.Modifiers}}
                for _, mod := range modifiers {
                    e = mod(e)
                }
                {{end}}
                return e
            }

        {{else if $customType | attrIsDuration -}}
            func(e *{{$elStructName}}) {{.Name}}(d time.Duration{{if $custom.Modifiers}}, modifiers ...{{$modTypeName}}{{end}}) *{{$elStructName}}{
                {{- if $custom.Modifiers}}
                key := customDataKey("data-{{.Key}}"{{if $custom.Modifiers}}, modifiers...{{end}})
                {{- else}}
                key := "data-{{.Key}}"
                {{- end}}
                if e.IntAttributes == nil {
                    e.IntAttributes = treemap.New[string,int]()
                }
                e.IntAttributes.Set(key, d.Milliseconds())
                return e
            }

        {{ else if $customType | attrIsBool -}}
            func(e *{{$elStructName}}) {{.Name}}Set(b bool{{if $custom.Modifiers}}, modifiers ...{{$modTypeName}}{{end}}) *{{$elStructName}}{
                {{- if $custom.Modifiers}}
                key := customDataKey("data-{{.Key}}"{{if $custom.Modifiers}}, modifiers...{{end}})
                {{- else}}
                key := "data-{{.Key}}"
                {{- end}}
                e.BoolAttributes.Set(key, b)
                return e
            }

            func(e *{{$elStructName}}) {{.Name}}({{if $custom.Modifiers}}, modifiers ...{$modTypeName}}{{end}}) *{{$elStructName}}{
                return e.{{.Name}}Set(true{{if $custom.Modifiers}}, modifiers...{{end}})
            }
        {{ else -}}
            !! No handler for type {{$custom.Type}}.
        {{ end -}}
    {{ else -}}
        !!!No handler for type {{.Type}}.
    {{end}}
{{end}}


