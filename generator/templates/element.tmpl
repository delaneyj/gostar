// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package {{.Package.Name}} {{.Element.Name}} is generated from configuration file.
// Description:
package elements

import(
    "fmt"
    "github.com/igrmk/treemap/v2"
)

{{ .Element.Description | comments}}
{{ $elUpper := .Element.Tag | upper | replace "-" "_" -}}
{{ $elStructName := printf "%s%sElement" .Package.Prefix $elUpper -}}
type {{$elStructName}} struct {
    *Element
}

// Create a new {{$elStructName}} element.
// This will create a new element with the tag
// "{{.Element.Tag}}" during rendering.
func {{if .Package.Prefix}}{{.Package.Prefix}}_{{end}}{{$elUpper}}({{if not .Element.NoChildren}}children ...ElementRenderer{{end}}) *{{$elStructName}} {
    e := NewElement("{{.Element.Tag}}", {{if not .Element.NoChildren}}children...{{end}})
    e.IsSelfClosing = {{.Element.NoChildren}}
    {{if not .Element.NoChildren}}e.Descendants = children{{end}}

    return &{{$elStructName}}{ Element: e }
}

func (e *{{$elStructName }}) Children(children ...ElementRenderer) *{{$elStructName}} {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *{{$elStructName }}) IfChildren(condition bool, children ...ElementRenderer) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *{{$elStructName }}) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *{{$elStructName }}) Text(text string) *{{$elStructName}} {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *{{$elStructName }}) TextF(format string, args ...any) *{{$elStructName}} {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *{{$elStructName }}) IfText(condition bool, text string) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, Text(text))
    }
    return e
}

func (e *{{$elStructName }}) IfTextF(condition bool, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
    }
    return e
}

func (e *{{$elStructName }}) Escaped(text string) *{{$elStructName}} {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *{{$elStructName }}) IfEscaped(condition bool, text string) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, Escaped(text))
    }
    return e
}

func (e *{{$elStructName }}) EscapedF(format string, args ...any) *{{$elStructName}} {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *{{$elStructName }}) IfEscapedF(condition bool, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.Descendants = append(e.Descendants, EscapedF(format, args...))
    }
    return e
}

func (e *{{$elStructName}}) CustomData(key, value string) *{{$elStructName}} {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *{{$elStructName}}) IfCustomData(condition bool, key, value string) *{{$elStructName}} {
    if condition {
        e.CustomData(key, value)
    }
    return e
}

func (e *{{$elStructName}}) CustomDataF(key, format string, args ...any) *{{$elStructName}} {
    return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *{{$elStructName}}) IfCustomDataF(condition bool, key, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.CustomData(key, fmt.Sprintf(format, args...))
    }
    return e
}

func (e *{{$elStructName}}) CustomDataRemove(key string) *{{$elStructName}} {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}

{{range .Element.Attributes}}
{{ .Description | comments }}
{{ $attrUpper := .Name | upper | replace "-" "_" | replace ":" "_" -}}
{{ if . | attrIsString -}}
func(e *{{$elStructName}}) {{$attrUpper}}(s string) *{{$elStructName}}{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("{{.Key}}", s)
    return e
}

func(e *{{$elStructName}}) If{{$attrUpper}}(condition bool, s string) *{{$elStructName}}{
    if condition {
        e.{{$attrUpper}}(s)
    }
    return e
}

// Remove the attribute {{.Name}} from the element.
func(e *{{$elStructName}}) {{$attrUpper}}Remove(s string) *{{$elStructName}}{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("{{.Key}}")
    return e
}
{{ else if . | attrIsDelimited -}}
func(e *{{$elStructName}}) {{$attrUpper}}(s ...string) *{{$elStructName}}{
    if e.DelimitedStrings == nil {
        e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
    }
    ds, ok := e.DelimitedStrings.Get("{{.Key}}")
    if !ok {
        ds = NewDelimitedBuilder[string]("{{.Type.Type.Delimited}}")
        e.DelimitedStrings.Set("{{.Key}}", ds)
    }
    ds.Add(s...)
    return e
}

func(e *{{$elStructName}}) If{{$attrUpper}}(condition bool, s ...string) *{{$elStructName}}{
    if condition {
        e.{{$attrUpper}}(s...)
    }
    return e
}

// Remove the attribute {{.Name}} from the element.
func(e *{{$elStructName}}) {{$attrUpper}}Remove(s ...string) *{{$elStructName}}{
    if e.DelimitedStrings == nil {
        return e
    }
    ds, ok := e.DelimitedStrings.Get("{{.Key}}")
    if !ok {
        return e
    }
    ds.Remove(s ...)
    return e
}

{{ else if . | attrIsKV -}}
func (e *{{$elStructName}}) {{$attrUpper}}F(k string, format string, args ...any) *{{$elStructName}} {
    return e.{{$attrUpper}}(k, fmt.Sprintf(format, args...))
}

func (e *{{$elStructName}}) If{{$attrUpper}}(condition bool, k string, v string) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}(k, v)
    }
    return e
}

func (e *{{$elStructName}}) {{$attrUpper}}(k string, v string) *{{$elStructName}} {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("{{.Key}}")
    if !ok {
        kv = NewKVBuilder("{{.Type.Type.Kv.KeyValueDelimiter}}", "{{.Type.Type.Kv.PairDelimiter}}")
        e.KVStrings.Set("{{.Key}}", kv)
    }
    kv.Add(k, v)
    return e
}

func (e *{{$elStructName}}) If{{$attrUpper}}F(condition bool, k string, format string, args ...any) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}(k, fmt.Sprintf(format, args...))
    }
    return e
}

// Add the attributes in the map to the element.
func (e *{{$elStructName}}) {{$attrUpper}}Map(m map[string]string) *{{$elStructName}} {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("{{.Key}}")
    if !ok {
        kv = NewKVBuilder("{{.Type.Type.Kv.KeyValueDelimiter}}", "{{.Type.Type.Kv.PairDelimiter}}")
        e.KVStrings.Set("{{.Key}}", kv)
    }
    for k, v := range m {
        kv.Add(k, v)
    }
    return e
}

// Add pairs of attributes to the element.
func (e *{{$elStructName}}) {{$attrUpper}}Pairs(pairs ...string) *{{$elStructName}} {
    if len(pairs) % 2 != 0 {
        panic("Must have an even number of pairs")
    }
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("{{.Key}}")
    if !ok {
        kv = NewKVBuilder("{{.Type.Type.Kv.KeyValueDelimiter}}", "{{.Type.Type.Kv.PairDelimiter}}")
        e.KVStrings.Set("{{.Key}}", kv)
    }

    for i := 0; i < len(pairs); i += 2 {
        kv.Add(pairs[i], pairs[i+1])
    }

    return e
}

func (e *{{$elStructName}}) If{{$attrUpper}}Pairs(condition bool, pairs ...string) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}Pairs(pairs...)
    }
    return e
}

// Remove the attribute {{.Name}} from the element.
func (e *{{$elStructName}}) {{$attrUpper}}Remove(keys ...string) *{{$elStructName}} {
    if e.KVStrings == nil {
        return e
    }
    kv, ok := e.KVStrings.Get("{{.Key}}")
    if !ok {
        return e
    }
    for _, k := range keys {
        kv.Remove(k)
    }
    return e
}

{{ else if . | attrIsChoices -}}
{{ $choicePrefix := (printf "%s%s%s" $.Package.Prefix ($.Element.Name | pascal) (.Key | pascal)) -}}
func(e *{{$elStructName}}) {{$attrUpper}}(c {{$choicePrefix}}Choice) *{{$elStructName}}{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("{{.Key}}", string(c))
    return e
}

type {{$choicePrefix}}Choice string
const(
{{ range $i, $choice := .Type.Type.Choices.Choices -}}
    {{if .Description }}{{ .Description | comments  }}{{end}}
    {{$choicePrefix}}_{{if not .Name}}empty{{else}}{{ .Name | replace "/" "_" | replace "-" "_" | replace ":" "_" | replace "." "_" | trim}}{{end}} {{$choicePrefix}}Choice = "{{.Name}}"
{{ end -}}
)

// Remove the attribute {{.Name}} from the element.
func(e *{{$elStructName}}) {{$attrUpper}}Remove(c {{$choicePrefix}}Choice) *{{$elStructName}}{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("{{.Key}}")
    return e
}
{{ else if . | attrIsInt -}}

func(e *{{$elStructName}}) {{$attrUpper}}(i int) *{{$elStructName}}{
    if e.IntAttributes == nil {
        e.IntAttributes = treemap.New[string,int]()
    }
    e.IntAttributes.Set("{{.Key}}", i)
    return e
}

func (e *{{$elStructName}}) If{{$attrUpper}}(condition bool, i int) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}(i)
    }
    return e
}

// Remove the attribute {{.Name}} from the element.
func(e *{{$elStructName}}) {{$attrUpper}}Remove(i int) *{{$elStructName}}{
    if e.IntAttributes == nil {
        return e
    }
    e.IntAttributes.Del("{{.Key}}")
    return e
}
{{ else if . | attrIsNumber -}}
func(e *{{$elStructName}}) {{$attrUpper}}(f float64) *{{$elStructName}}{
    if e.FloatAttributes == nil {
        e.FloatAttributes = treemap.New[string,float64]()
    }
    e.FloatAttributes.Set("{{.Key}}", f)
    return e
}

func (e *{{$elStructName}}) If{{$attrUpper}}(condition bool, f float64) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}(f)
    }
    return e
}

{{ else if . | attrIsBool -}}
func(e *{{$elStructName}}) {{$attrUpper}}() *{{$elStructName}}{
    e.{{$attrUpper}}Set(true)
    return e
}

func(e *{{$elStructName}}) If{{$attrUpper}}(condition bool) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}Set(true)
    }
    return e
}

// Set the attribute {{.Name}} to the value b explicitly.
func(e *{{$elStructName}}) {{$attrUpper}}Set(b bool) *{{$elStructName}}{
    if e.BoolAttributes == nil {
        e.BoolAttributes = treemap.New[string,bool]()
    }
    e.BoolAttributes.Set("{{.Key}}", b)
    return e
}

func (e *{{$elStructName}}) IfSet{{$attrUpper}}(condition bool, b bool) *{{$elStructName}} {
    if condition {
        e.{{$attrUpper}}Set(b)
    }
    return e
}

// Remove the attribute {{.Name}} from the element.
func(e *{{$elStructName}}) {{$attrUpper}}Remove(b bool) *{{$elStructName}}{
    if e.BoolAttributes == nil {
        return e
    }
    e.BoolAttributes.Del("{{.Key}}")
    return e
}

{{ else if . | attrIsRune -}}
func(e *{{$elStructName}}) {{$attrUpper}}(r rune) *{{$elStructName}}{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("{{.Key}}", string(r))
    return e
}

func(e *{{$elStructName}}) If{{$attrUpper}}(condition bool, r rune) *{{$elStructName}}{
    if condition {
        e.{{$attrUpper}}(r)
    }
    return e
}

// Remove the attribute {{.Name}} from the element.
func(e *{{$elStructName}}) {{$attrUpper}}Remove() *{{$elStructName}}{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("{{.Key}}")
    return e
}

{{ else -}}
!!!No handler for type {{.Type}}.
{{end}}
{{end}}
