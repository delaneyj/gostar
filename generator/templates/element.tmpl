package  {{.PackageName}}

import (
    "fmt"
)

type {{.ElementName }} struct {
    *Element
}

func {{.NewElement }}(children ...ElementBuilder) *{{.ElementName }} {
    return &{{.ElementName }}{
        Element: &Element{
            Tag: "{{.Tag}}",
            IsSelfClosing: {{.IsSelfClosing}},
            Descendants: children,
        },
    }
}

func (e *{{.ElementName }}) Children(children ...ElementBuilder) *{{.ElementName }} {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *{{.ElementName }}) IfChildren(condition bool, children ...ElementBuilder) *{{.ElementName }} {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *{{.ElementName }}) TernChildren(condition bool, trueChildren, falseChildren ElementBuilder) *{{.ElementName }} {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *{{.ElementName }}) Text(text string) *{{.ElementName }} {
    e.Descendants = append(e.Descendants, TEXT(text))
    return e
}

func (e *{{.ElementName }}) TextF(format string, args ...any) *{{.ElementName }} {
    TEXT(fmt.Sprintf(format, args...))
    return e
}

func (e *{{.ElementName }}) Raw(text string) *{{.ElementName }} {
    e.Descendants = append(e.Descendants, RAW(text))
    return e
}

func (e *{{.ElementName }}) RawF(format string, args ...any) *{{.ElementName }} {
    RAW(fmt.Sprintf(format, args...))
    return e
}

func (e *{{.ElementName}}) CustomData(key, value string) *{{.ElementName}} {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = map[string]string{}
    }
	e.CustomDataAttributes[key] = value
	return e
}

func (e *{{.ElementName}}) CustomDataRemove(key string) *{{.ElementName}} {
	if e.CustomDataAttributes == nil {
		return e
	}
	delete(e.CustomDataAttributes, key)
	return e
}

{{ range .Attributes }}
// {{.Name}} sets the "{{.Key}}" attribute.
{{- range .Description }}
// {{.}}
{{- end }}
// Values values are constrained to:
{{- range .ValidValueTypes}}
//  * {{.}}
{{- end }}
{{- if (eq .Mode "bool") }}
func (e *{{$.ElementName}}) {{.Name}}() *{{$.ElementName}} {
    if e.BoolAttributes == nil {
        e.BoolAttributes = map[string]struct{}{}
    }
    e.BoolAttributes["{{.Key}}"] = struct{}{}
    return e
}

func (e *{{$.ElementName}}) Remove{{.Name}}() *{{$.ElementName}} {
    if e.BoolAttributes == nil {
        return e
    }
    delete(e.BoolAttributes, "{{.Key}}")
    return e
}

func (e *{{$.ElementName}}) Set{{.Name}}(b bool) *{{$.ElementName}} {
    if b {
        return e.{{.Name}}()
    }
    return e.Remove{{.Name}}()
}
{{- else if (eq .Mode "kv") }}
func (e *{{$.ElementName}}) {{.Name}}(k,v string) *{{$.ElementName}} {
    if e.DelimitedKVAttributes == nil {
        e.DelimitedKVAttributes = map[string]*DelimitedKVString{}
    }
    kv, ok := e.DelimitedKVAttributes["{{.Key}}"]
    if !ok {
        kv = NewEqualSemicolonDelimitedKVString()
        e.DelimitedKVAttributes["{{.Key}}"] = kv
    }
    kv.Add(k,v)
    return e
}

func (e *{{$.ElementName}}) Remove{{.Name}}(k string) *{{$.ElementName}} {
    kv, ok := e.DelimitedKVAttributes["{{.Key}}"]
    if !ok {
        return e
    }
    kv.Remove(k)
    return e
}
{{- else if (eq .Mode "space-delimited") }}
func(e *{{$.ElementName}}) {{.Name}}(v string) *{{$.ElementName}} {
    if e.DelimitedStringAttributes == nil {
        e.DelimitedStringAttributes = map[string]*DelimitedString{}
    }
    kv, ok := e.DelimitedStringAttributes["{{.Key}}"]
    if !ok {
        kv = NewSpaceDelimitedString()
        e.DelimitedStringAttributes["{{.Key}}"] = kv
    }
    kv.Add(v)
    return e
}

func (e *{{$.ElementName}}) Set{{.Name}}(v string) *{{$.ElementName}} {
    kv := NewSpaceDelimitedString()
    e.DelimitedStringAttributes["{{.Key}}"] = kv
    kv.Add(v)
    return e
}

func (e *{{$.ElementName}}) Remove{{.Name}}(v string) *{{$.ElementName}} {
    kv, ok := e.DelimitedStringAttributes["{{.Key}}"]
    if !ok {
        return e
    }
    kv.Remove(v)
    return e
}

{{- else if (eq .Mode "string") }}
func (e *{{$.ElementName}}) {{.Name}}(v string) *{{$.ElementName}} {
    if e.StringAttributes == nil {
        e.StringAttributes = map[string]string{}
    }
    e.StringAttributes["{{.Key}}"] = v
    return e
}

func (e *{{$.ElementName}}) Remove{{.Name}}(v string) *{{$.ElementName}} {
    delete(e.StringAttributes, "{{.Key}}")
    return e
}

{{- end -}}
{{ end }}
