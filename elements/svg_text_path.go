// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg textPath is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <textPath> SVG element defines a set of glyphs that exactly fit along a
// curve.
type SVGTEXTPATHElement struct {
	*Element
}

// Create a new SVGTEXTPATHElement element.
// This will create a new element with the tag
// "textPath" during rendering.
func SVG_TEXTPATH(children ...ElementRenderer) *SVGTEXTPATHElement {
	e := NewElement("textPath", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGTEXTPATHElement{Element: e}
}

func (e *SVGTEXTPATHElement) Children(children ...ElementRenderer) *SVGTEXTPATHElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGTEXTPATHElement) IfChildren(condition bool, children ...ElementRenderer) *SVGTEXTPATHElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGTEXTPATHElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGTEXTPATHElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGTEXTPATHElement) Text(text string) *SVGTEXTPATHElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGTEXTPATHElement) TextF(format string, args ...any) *SVGTEXTPATHElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGTEXTPATHElement) IfText(condition bool, text string) *SVGTEXTPATHElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(text))
	}
	return e
}

func (e *SVGTEXTPATHElement) IfTextF(condition bool, format string, args ...any) *SVGTEXTPATHElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
	}
	return e
}

func (e *SVGTEXTPATHElement) Escaped(text string) *SVGTEXTPATHElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGTEXTPATHElement) IfEscaped(condition bool, text string) *SVGTEXTPATHElement {
	if condition {
		e.Descendants = append(e.Descendants, Escaped(text))
	}
	return e
}

func (e *SVGTEXTPATHElement) EscapedF(format string, args ...any) *SVGTEXTPATHElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGTEXTPATHElement) IfEscapedF(condition bool, format string, args ...any) *SVGTEXTPATHElement {
	if condition {
		e.Descendants = append(e.Descendants, EscapedF(format, args...))
	}
	return e
}

func (e *SVGTEXTPATHElement) CustomData(key, value string) *SVGTEXTPATHElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGTEXTPATHElement) IfCustomData(condition bool, key, value string) *SVGTEXTPATHElement {
	if condition {
		e.CustomData(key, value)
	}
	return e
}

func (e *SVGTEXTPATHElement) CustomDataF(key, format string, args ...any) *SVGTEXTPATHElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *SVGTEXTPATHElement) IfCustomDataF(condition bool, key, format string, args ...any) *SVGTEXTPATHElement {
	if condition {
		e.CustomData(key, fmt.Sprintf(format, args...))
	}
	return e
}

func (e *SVGTEXTPATHElement) CustomDataRemove(key string) *SVGTEXTPATHElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// A URI reference to the path to render along.
func (e *SVGTEXTPATHElement) HREF(s string) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("href", s)
	return e
}

func (e *SVGTEXTPATHElement) IfHREF(condition bool, s string) *SVGTEXTPATHElement {
	if condition {
		e.HREF(s)
	}
	return e
}

// Remove the attribute href from the element.
func (e *SVGTEXTPATHElement) HREFRemove(s string) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("href")
	return e
}

// Indicates an offset from the start of the path, where the first character is
// rendered.
func (e *SVGTEXTPATHElement) STARTOFFSET(s string) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("startOffset", s)
	return e
}

func (e *SVGTEXTPATHElement) IfSTARTOFFSET(condition bool, s string) *SVGTEXTPATHElement {
	if condition {
		e.STARTOFFSET(s)
	}
	return e
}

// Remove the attribute startOffset from the element.
func (e *SVGTEXTPATHElement) STARTOFFSETRemove(s string) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("startOffset")
	return e
}

// Indicates the method by which text should be rendered along the path.
func (e *SVGTEXTPATHElement) METHOD(c SVGTextPathMethodChoice) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("method", string(c))
	return e
}

type SVGTextPathMethodChoice string

const (
	// Indicates the method by which text should be rendered along the path.
	SVGTextPathMethod_align SVGTextPathMethodChoice = "align"
	// Indicates the method by which text should be rendered along the path.
	SVGTextPathMethod_stretch SVGTextPathMethodChoice = "stretch"
)

// Remove the attribute method from the element.
func (e *SVGTEXTPATHElement) METHODRemove(c SVGTextPathMethodChoice) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("method")
	return e
}

// Indicates the spacing behavior between characters.
func (e *SVGTEXTPATHElement) SPACING(c SVGTextPathSpacingChoice) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("spacing", string(c))
	return e
}

type SVGTextPathSpacingChoice string

const (
	// Indicates the spacing behavior between characters.
	SVGTextPathSpacing_auto SVGTextPathSpacingChoice = "auto"
	// Indicates the spacing behavior between characters.
	SVGTextPathSpacing_exact SVGTextPathSpacingChoice = "exact"
)

// Remove the attribute spacing from the element.
func (e *SVGTEXTPATHElement) SPACINGRemove(c SVGTextPathSpacingChoice) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("spacing")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGTEXTPATHElement) CLASS(s ...string) *SVGTEXTPATHElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

func (e *SVGTEXTPATHElement) IfCLASS(condition bool, s ...string) *SVGTEXTPATHElement {
	if condition {
		e.CLASS(s...)
	}
	return e
}

// Remove the attribute class from the element.
func (e *SVGTEXTPATHElement) CLASSRemove(s ...string) *SVGTEXTPATHElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGTEXTPATHElement) ID(s string) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

func (e *SVGTEXTPATHElement) IfID(condition bool, s string) *SVGTEXTPATHElement {
	if condition {
		e.ID(s)
	}
	return e
}

// Remove the attribute id from the element.
func (e *SVGTEXTPATHElement) IDRemove(s string) *SVGTEXTPATHElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGTEXTPATHElement) STYLEF(k string, format string, args ...any) *SVGTEXTPATHElement {
	return e.STYLE(k, fmt.Sprintf(format, args...))
}

func (e *SVGTEXTPATHElement) IfSTYLE(condition bool, k string, v string) *SVGTEXTPATHElement {
	if condition {
		e.STYLE(k, v)
	}
	return e
}

func (e *SVGTEXTPATHElement) STYLE(k string, v string) *SVGTEXTPATHElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

func (e *SVGTEXTPATHElement) IfSTYLEF(condition bool, k string, format string, args ...any) *SVGTEXTPATHElement {
	if condition {
		e.STYLE(k, fmt.Sprintf(format, args...))
	}
	return e
}

// Add the attributes in the map to the element.
func (e *SVGTEXTPATHElement) STYLEMap(m map[string]string) *SVGTEXTPATHElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGTEXTPATHElement) STYLEPairs(pairs ...string) *SVGTEXTPATHElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

func (e *SVGTEXTPATHElement) IfSTYLEPairs(condition bool, pairs ...string) *SVGTEXTPATHElement {
	if condition {
		e.STYLEPairs(pairs...)
	}
	return e
}

// Remove the attribute style from the element.
func (e *SVGTEXTPATHElement) STYLERemove(keys ...string) *SVGTEXTPATHElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
