// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg feTurbulence is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <feTurbulence> SVG filter primitive creates an image using the Perlin
// turbulence function
// It allows the synthesis of artificial textures like clouds or marble.
type SVGFETURBULENCEElement struct {
	*Element
}

// Create a new SVGFETURBULENCEElement element.
// This will create a new element with the tag
// "feTurbulence" during rendering.
func SVG_FETURBULENCE(children ...ElementRenderer) *SVGFETURBULENCEElement {
	e := NewElement("feTurbulence", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGFETURBULENCEElement{Element: e}
}

func (e *SVGFETURBULENCEElement) Children(children ...ElementRenderer) *SVGFETURBULENCEElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGFETURBULENCEElement) IfChildren(condition bool, children ...ElementRenderer) *SVGFETURBULENCEElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGFETURBULENCEElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGFETURBULENCEElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGFETURBULENCEElement) Text(text string) *SVGFETURBULENCEElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGFETURBULENCEElement) TextF(format string, args ...any) *SVGFETURBULENCEElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGFETURBULENCEElement) Escaped(text string) *SVGFETURBULENCEElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGFETURBULENCEElement) EscapedF(format string, args ...any) *SVGFETURBULENCEElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGFETURBULENCEElement) CustomData(key, value string) *SVGFETURBULENCEElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGFETURBULENCEElement) CustomDataRemove(key string) *SVGFETURBULENCEElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// The baseFrequency attribute represent the base frequencies in the X and Y
// directions of the turbulence function.
func (e *SVGFETURBULENCEElement) BASEFREQUENCY(s string) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("baseFrequency", s)
	return e
}

// Remove the attribute baseFrequency from the element.
func (e *SVGFETURBULENCEElement) BASEFREQUENCYRemove(s string) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("baseFrequency")
	return e
}

// The numOctaves attribute indicates the number of octaves to be used by the
// noise function.
func (e *SVGFETURBULENCEElement) NUMOCTAVES(f float64) *SVGFETURBULENCEElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("numOctaves", f)
	return e
}

// The seed attribute indicates which number to use to seed the random number
// generator.
func (e *SVGFETURBULENCEElement) SEED(f float64) *SVGFETURBULENCEElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("seed", f)
	return e
}

// The stitchTiles attribute indicates how the Perlin noise function should be
// tiled
// It is ignored if type is not set to 'turbulence'.
func (e *SVGFETURBULENCEElement) STITCHTILES(c SVGFeTurbulenceStitchTilesChoice) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("stitchTiles", string(c))
	return e
}

type SVGFeTurbulenceStitchTilesChoice string

const (
	// The <feTurbulence> SVG filter primitive creates an image using the Perlin
	// turbulence function
	// It allows the synthesis of artificial textures like clouds or marble.
	SVGFeTurbulenceStitchTiles_noStitch SVGFeTurbulenceStitchTilesChoice = "noStitch"
	// The <feTurbulence> SVG filter primitive creates an image using the Perlin
	// turbulence function
	// It allows the synthesis of artificial textures like clouds or marble.
	SVGFeTurbulenceStitchTiles_stitch SVGFeTurbulenceStitchTilesChoice = "stitch"
)

// Remove the attribute stitchTiles from the element.
func (e *SVGFETURBULENCEElement) STITCHTILESRemove(c SVGFeTurbulenceStitchTilesChoice) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("stitchTiles")
	return e
}

// The type of turbulence function.
func (e *SVGFETURBULENCEElement) TYPE(c SVGFeTurbulenceTypeChoice) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("type", string(c))
	return e
}

type SVGFeTurbulenceTypeChoice string

const (
	// The type of turbulence function.
	SVGFeTurbulenceType_fractalNoise SVGFeTurbulenceTypeChoice = "fractalNoise"
	// The type of turbulence function.
	SVGFeTurbulenceType_turbulence SVGFeTurbulenceTypeChoice = "turbulence"
)

// Remove the attribute type from the element.
func (e *SVGFETURBULENCEElement) TYPERemove(c SVGFeTurbulenceTypeChoice) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("type")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGFETURBULENCEElement) CLASS(s ...string) *SVGFETURBULENCEElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

// Remove the attribute class from the element.
func (e *SVGFETURBULENCEElement) CLASSRemove(s ...string) *SVGFETURBULENCEElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGFETURBULENCEElement) ID(s string) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

// Remove the attribute id from the element.
func (e *SVGFETURBULENCEElement) IDRemove(s string) *SVGFETURBULENCEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGFETURBULENCEElement) STYLE(k string, v string) *SVGFETURBULENCEElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

// Add the attributes in the map to the element.
func (e *SVGFETURBULENCEElement) STYLEMap(m map[string]string) *SVGFETURBULENCEElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGFETURBULENCEElement) STYLEPairs(pairs ...string) *SVGFETURBULENCEElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

// Remove the attribute style from the element.
func (e *SVGFETURBULENCEElement) STYLERemove(keys ...string) *SVGFETURBULENCEElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
