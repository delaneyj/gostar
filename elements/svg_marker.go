// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg marker is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <marker> SVG element defines the graphics that is to be used for drawing
// arrowheads or polymarkers on a given <path>, <line>, <polyline> or <polygon>
// element.
type SVGMARKERElement struct {
	*Element
}

// Create a new SVGMARKERElement element.
// This will create a new element with the tag
// "marker" during rendering.
func SVG_MARKER(children ...ElementRenderer) *SVGMARKERElement {
	e := NewElement("marker", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGMARKERElement{Element: e}
}

func (e *SVGMARKERElement) Children(children ...ElementRenderer) *SVGMARKERElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGMARKERElement) IfChildren(condition bool, children ...ElementRenderer) *SVGMARKERElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGMARKERElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGMARKERElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGMARKERElement) Text(text string) *SVGMARKERElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGMARKERElement) TextF(format string, args ...any) *SVGMARKERElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGMARKERElement) Escaped(text string) *SVGMARKERElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGMARKERElement) EscapedF(format string, args ...any) *SVGMARKERElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGMARKERElement) CustomData(key, value string) *SVGMARKERElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGMARKERElement) CustomDataF(key, format string, args ...any) *SVGMARKERElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *SVGMARKERElement) CustomDataRemove(key string) *SVGMARKERElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// The x-axis coordinate of the reference point which is to be aligned exactly at
// the marker position.
func (e *SVGMARKERElement) REFX(f float64) *SVGMARKERElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("refX", f)
	return e
}

// The y-axis coordinate of the reference point which is to be aligned exactly at
// the marker position.
func (e *SVGMARKERElement) REFY(f float64) *SVGMARKERElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("refY", f)
	return e
}

// The width of the marker viewport.
func (e *SVGMARKERElement) MARKERWIDTH(f float64) *SVGMARKERElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("markerWidth", f)
	return e
}

// The height of the marker viewport.
func (e *SVGMARKERElement) MARKERHEIGHT(f float64) *SVGMARKERElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("markerHeight", f)
	return e
}

// The orientation of the marker relative to the shape it is attached to.
func (e *SVGMARKERElement) ORIENT(c SVGMarkerOrientChoice) *SVGMARKERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("orient", string(c))
	return e
}

type SVGMarkerOrientChoice string

const (
	// The orientation of the marker relative to the shape it is attached to.
	SVGMarkerOrient_auto SVGMarkerOrientChoice = "auto"
	// The orientation of the marker relative to the shape it is attached to.
	SVGMarkerOrient_auto_start_reverse SVGMarkerOrientChoice = "auto-start-reverse"
	// The orientation of the marker relative to the shape it is attached to.
	SVGMarkerOrient_angle SVGMarkerOrientChoice = "angle"
)

// Remove the attribute orient from the element.
func (e *SVGMARKERElement) ORIENTRemove(c SVGMarkerOrientChoice) *SVGMARKERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("orient")
	return e
}

// The coordinate system for the various length values within the marker.
func (e *SVGMARKERElement) MARKERUNITS(c SVGMarkerMarkerUnitsChoice) *SVGMARKERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("markerUnits", string(c))
	return e
}

type SVGMarkerMarkerUnitsChoice string

const (
	// The coordinate system for the various length values within the marker.
	SVGMarkerMarkerUnits_userSpaceOnUse SVGMarkerMarkerUnitsChoice = "userSpaceOnUse"
	// The coordinate system for the various length values within the marker.
	SVGMarkerMarkerUnits_strokeWidth SVGMarkerMarkerUnitsChoice = "strokeWidth"
)

// Remove the attribute markerUnits from the element.
func (e *SVGMARKERElement) MARKERUNITSRemove(c SVGMarkerMarkerUnitsChoice) *SVGMARKERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("markerUnits")
	return e
}

// The position and size of the marker viewport (the bounds of the marker).
func (e *SVGMARKERElement) VIEWBOX(s string) *SVGMARKERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("viewBox", s)
	return e
}

// Remove the attribute viewBox from the element.
func (e *SVGMARKERElement) VIEWBOXRemove(s string) *SVGMARKERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("viewBox")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGMARKERElement) CLASS(s ...string) *SVGMARKERElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

// Remove the attribute class from the element.
func (e *SVGMARKERElement) CLASSRemove(s ...string) *SVGMARKERElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGMARKERElement) ID(s string) *SVGMARKERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

// Remove the attribute id from the element.
func (e *SVGMARKERElement) IDRemove(s string) *SVGMARKERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGMARKERElement) STYLEF(k string, format string, args ...any) *SVGMARKERElement {
	return e.STYLE(k, fmt.Sprintf(format, args...))
}

func (e *SVGMARKERElement) STYLE(k string, v string) *SVGMARKERElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

// Add the attributes in the map to the element.
func (e *SVGMARKERElement) STYLEMap(m map[string]string) *SVGMARKERElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGMARKERElement) STYLEPairs(pairs ...string) *SVGMARKERElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

// Remove the attribute style from the element.
func (e *SVGMARKERElement) STYLERemove(keys ...string) *SVGMARKERElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
