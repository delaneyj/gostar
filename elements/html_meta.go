// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package html meta is generated from configuration file.
// Description:
package elements

import(
    "fmt"
    "time"
    "github.com/igrmk/treemap/v2"
    "github.com/goccy/go-json"
    "github.com/samber/lo"
)

// The HTML <meta> element represents metadata that cannot be represented by other 
// HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>. 
type METAElement struct {
    *Element
}

// Create a new METAElement element.
// This will create a new element with the tag
// "meta" during rendering.
func META() *METAElement {
    e := NewElement("meta", )
    e.IsSelfClosing = true
    

    return &METAElement{ Element: e }
}

func (e *METAElement) Children(children ...ElementRenderer) *METAElement {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *METAElement) IfChildren(condition bool, children ...ElementRenderer) *METAElement {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *METAElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *METAElement {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *METAElement) Text(text string) *METAElement {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *METAElement) TextF(format string, args ...any) *METAElement {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *METAElement) IfText(condition bool, text string) *METAElement {
    if condition {
        e.Descendants = append(e.Descendants, Text(text))
    }
    return e
}

func (e *METAElement) IfTextF(condition bool, format string, args ...any) *METAElement {
    if condition {
        e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
    }
    return e
}

func (e *METAElement) Escaped(text string) *METAElement {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *METAElement) IfEscaped(condition bool, text string) *METAElement {
    if condition {
        e.Descendants = append(e.Descendants, Escaped(text))
    }
    return e
}

func (e *METAElement) EscapedF(format string, args ...any) *METAElement {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *METAElement) IfEscapedF(condition bool, format string, args ...any) *METAElement {
    if condition {
        e.Descendants = append(e.Descendants, EscapedF(format, args...))
    }
    return e
}

func (e *METAElement) CustomData(key, value string) *METAElement {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *METAElement) IfCustomData(condition bool, key, value string) *METAElement {
    if condition {
        e.CustomData(key, value)
    }
    return e
}

func (e *METAElement) CustomDataF(key, format string, args ...any) *METAElement {
    return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *METAElement) IfCustomDataF(condition bool, key, format string, args ...any) *METAElement {
    if condition {
        e.CustomData(key, fmt.Sprintf(format, args...))
    }
    return e
}

func (e *METAElement) CustomDataRemove(key string) *METAElement {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}


    // Declares the document's character encoding. 
    func(e *METAElement) CHARSET(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("charset", s)
            return e
        }

        func(e *METAElement) IfCHARSET(condition bool, s string) *METAElement{
            if condition {
                e.CHARSET(s)
            }
            return e
        }

        // Remove the attribute CHARSET from the element.
        func(e *METAElement) CHARSETRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("charset")
            return e
        }
    

    // Gives the value associated with the http-equiv or name attribute. 
    func(e *METAElement) CONTENT(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("content", s)
            return e
        }

        func(e *METAElement) IfCONTENT(condition bool, s string) *METAElement{
            if condition {
                e.CONTENT(s)
            }
            return e
        }

        // Remove the attribute CONTENT from the element.
        func(e *METAElement) CONTENTRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("content")
            return e
        }
    

    // Provides an HTTP header for the information/value of the content attribute. 
    func(e *METAElement) HTTP_EQUIV(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("http-equiv", s)
            return e
        }

        func(e *METAElement) IfHTTP_EQUIV(condition bool, s string) *METAElement{
            if condition {
                e.HTTP_EQUIV(s)
            }
            return e
        }

        // Remove the attribute HTTP_EQUIV from the element.
        func(e *METAElement) HTTP_EQUIVRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("http-equiv")
            return e
        }
    

    // Specifies a name for the metadata. 
    func(e *METAElement) NAME(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("name", s)
            return e
        }

        func(e *METAElement) IfNAME(condition bool, s string) *METAElement{
            if condition {
                e.NAME(s)
            }
            return e
        }

        // Remove the attribute NAME from the element.
        func(e *METAElement) NAMERemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("name")
            return e
        }
    

    // The accesskey global attribute provides a hint for generating a keyboard 
// shortcut for the current element 
// The attribute value must consist of a single printable character (which 
// includes accented and other characters that can be generated by the keyboard). 
    func(e *METAElement) ACCESSKEY(r rune) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("accesskey", string(r))
            return e
        }

        func(e *METAElement) IfACCESSKEY(condition bool, r rune) *METAElement{
            if condition {
                e.ACCESSKEY(r)
            }
            return e
        }

        // Remove the attribute ACCESSKEY from the element.
        func(e *METAElement) ACCESSKEYRemove() *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("accesskey")
            return e
        }

    

    // The autocapitalize global attribute is an enumerated attribute that controls 
// whether and how text input is automatically capitalized as it is entered/edited 
// by the user 
// autocapitalize can be set on <input> and <textarea> elements, and on their 
// containing <form> elements 
// When autocapitalize is set on a <form> element, it sets the autocapitalize 
// behavior for all contained <input>s and <textarea>s, overriding any 
// autocapitalize values set on contained elements 
// autocapitalize has no effect on the url, email, or password <input> types, 
// where autocapitalization is never enabled 
// Where autocapitalize is not specified, the adopted default behavior varies 
// between browsers 
// For example: Chrome and Safari default to on/sentences Firefox defaults to 
// off/none. 
    func(e *METAElement) AUTOCAPITALIZE(c MetaAutocapitalizeChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("autocapitalize", string(c))
            return e
        }

        type MetaAutocapitalizeChoice string
        const(
        // Do not automatically capitalize any text. 
            MetaAutocapitalize_off MetaAutocapitalizeChoice = "off"
        // Do not automatically capitalize any text. 
            MetaAutocapitalize_none MetaAutocapitalizeChoice = "none"
        // Automatically capitalize the first character of each sentence. 
            MetaAutocapitalize_sentences MetaAutocapitalizeChoice = "sentences"
        // Automatically capitalize the first character of each sentence. 
            MetaAutocapitalize_on MetaAutocapitalizeChoice = "on"
        // Automatically capitalize the first character of each word. 
            MetaAutocapitalize_words MetaAutocapitalizeChoice = "words"
        // Automatically capitalize all characters. 
            MetaAutocapitalize_characters MetaAutocapitalizeChoice = "characters"
        )

        // Remove the attribute AUTOCAPITALIZE from the element.
        func(e *METAElement) AUTOCAPITALIZERemove(c MetaAutocapitalizeChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("autocapitalize")
            return e
        }
        

    // The autofocus global attribute is a Boolean attribute indicating that an 
// element should be focused on page load, or when the <dialog> that it is part of 
// is displayed. 
// 		Accessibility concerns Automatically focusing a form control can confuse 
// visually-impaired people using screen-reading technology and people with 
// cognitive impairments 
// When autofocus is assigned, screen-readers "teleport" their user to the form 
// control without warning them beforehand. 
// 		Use careful consideration for accessibility when applying the autofocus 
// attribute 
// Automatically focusing on a control can cause the page to scroll on load 
// The focus can also cause dynamic keyboards to display on some touch devices 
// While a screen reader will announce the label of the form control receiving 
// focus, the screen reader will not announce anything before the label, and the 
// sighted user on a small device will equally miss the context created by the 
// preceding content. 
    func(e *METAElement) AUTOFOCUS() *METAElement{
            e.AUTOFOCUSSet(true)
            return e
        }

        func(e *METAElement) IfAUTOFOCUS(condition bool) *METAElement {
            if condition {
                e.AUTOFOCUSSet(true)
            }
            return e
        }

        // Set the attribute AUTOFOCUS to the value b explicitly.
        func(e *METAElement) AUTOFOCUSSet(b bool) *METAElement{
            if e.BoolAttributes == nil {
                e.BoolAttributes = treemap.New[string,bool]()
            }
            e.BoolAttributes.Set("autofocus", b)
            return e
        }

        func (e *METAElement) IfSetAUTOFOCUS(condition bool, b bool) *METAElement {
            if condition {
                e.AUTOFOCUSSet(b)
            }
            return e
        }

        // Remove the attribute AUTOFOCUS from the element.
        func(e *METAElement) AUTOFOCUSRemove(b bool) *METAElement{
            if e.BoolAttributes == nil {
                return e
            }
            e.BoolAttributes.Del("autofocus")
            return e
        }

    

    // The class global attribute is a space-separated list of the case-sensitive 
// classes of the element 
// Classes allow CSS and JavaScript to select and access specific elements via the 
// class selectors or functions like the DOM method 
// document.getElementsByClassName. 
    func(e *METAElement) CLASS(s ...string) *METAElement{
            if e.DelimitedStrings == nil {
                e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
            }
            ds, ok := e.DelimitedStrings.Get("class")
            if !ok {
                ds = NewDelimitedBuilder[string](" ")
                e.DelimitedStrings.Set("class", ds)
            }
            ds.Add(s...)
            return e
        }

        func(e *METAElement) IfCLASS(condition bool, s ...string) *METAElement{
            if condition {
                e.CLASS(s...)
            }
            return e
        }

        // Remove the attribute CLASS from the element.
        func(e *METAElement) CLASSRemove(s ...string) *METAElement{
            if e.DelimitedStrings == nil {
                return e
            }
            ds, ok := e.DelimitedStrings.Get("class")
            if !ok {
                return e
            }
            ds.Remove(s ...)
            return e
        }

    

    // The contenteditable global attribute is an enumerated attribute indicating if 
// the element should be editable by the user 
// If so, the browser modifies its widget to allow editing. 
    func(e *METAElement) CONTENTEDITABLE(c MetaContenteditableChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("contenteditable", string(c))
            return e
        }

        type MetaContenteditableChoice string
        const(
        // The element is editable. 
            MetaContenteditable_empty MetaContenteditableChoice = ""
        // The element is editable. 
            MetaContenteditable_true MetaContenteditableChoice = "true"
        // The element is not editable. 
            MetaContenteditable_false MetaContenteditableChoice = "false"
        // which indicates that the element's raw text is editable, but rich text 
// formatting is disabled. 
            MetaContenteditable_plaintext_only MetaContenteditableChoice = "plaintext-only"
        )

        // Remove the attribute CONTENTEDITABLE from the element.
        func(e *METAElement) CONTENTEDITABLERemove(c MetaContenteditableChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("contenteditable")
            return e
        }
        

    // The dir global attribute is an enumerated attribute that indicates the 
// directionality of the element's text 
// Note: This attribute is mandatory for the <bdo> element where it has a 
// different semantic meaning 
// This attribute is not inherited by the <bdi> element 
// If not set, its value is auto 
// This attribute can be overridden by the CSS properties direction and 
// unicode-bidi, if a CSS page is active and the element supports these properties 
// As the directionality of the text is semantically related to its content and 
// not to its presentation, it is recommended that web developers use this 
// attribute instead of the related CSS properties when possible 
// That way, the text will display correctly even on a browser that doesn't 
// support CSS or has the CSS deactivated 
// The auto value should be used for data with an unknown directionality, like 
// data coming from user input, eventually stored in a database. 
    func(e *METAElement) DIR(c MetaDirChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("dir", string(c))
            return e
        }

        type MetaDirChoice string
        const(
        // which means left to right and is to be used for languages that are written from 
// the left to the right (like English); 
            MetaDir_ltr MetaDirChoice = "ltr"
        // which means right to left and is to be used for languages that are written from 
// the right to the left (like Arabic); 
            MetaDir_rtl MetaDirChoice = "rtl"
        // which lets the user agent decide 
// It uses a basic algorithm as it parses the characters inside the element until 
// it finds a character with a strong directionality, then it applies that 
// directionality to the whole element. 
            MetaDir_auto MetaDirChoice = "auto"
        )

        // Remove the attribute DIR from the element.
        func(e *METAElement) DIRRemove(c MetaDirChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("dir")
            return e
        }
        

    // The draggable global attribute is an enumerated attribute that indicates 
// whether the element can be dragged, either with native browser behavior or the 
// HTML Drag and Drop API. 
    func(e *METAElement) DRAGGABLE(c MetaDraggableChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("draggable", string(c))
            return e
        }

        type MetaDraggableChoice string
        const(
        // The element is draggable. 
            MetaDraggable_true MetaDraggableChoice = "true"
        // The element is not draggable. 
            MetaDraggable_false MetaDraggableChoice = "false"
        // drag behavior is the default browser behavior: only text selections, images, 
// and links can be dragged 
// For other elements, the event ondragstart must be set for drag and drop to work 
            MetaDraggable_empty MetaDraggableChoice = ""
        // drag behavior is the default browser behavior: only text selections, images, 
// and links can be dragged 
// For other elements, the event ondragstart must be set for drag and drop to work 
            MetaDraggable_auto MetaDraggableChoice = "auto"
        )

        // Remove the attribute DRAGGABLE from the element.
        func(e *METAElement) DRAGGABLERemove(c MetaDraggableChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("draggable")
            return e
        }
        

    // The enterkeyhint global attribute is an enumerated attribute defining what 
// action label (or icon) to present for the enter key on virtual keyboards. 
    func(e *METAElement) ENTERKEYHINT(c MetaEnterkeyhintChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("enterkeyhint", string(c))
            return e
        }

        type MetaEnterkeyhintChoice string
        const(
        // Typically inserting a new line. 
            MetaEnterkeyhint_enter MetaEnterkeyhintChoice = "enter"
        // Typically meaning there is nothing more to input and the input method editor 
// (IME) will be closed. 
            MetaEnterkeyhint_done MetaEnterkeyhintChoice = "done"
        // Typically meaning to take the user to the target of the text they typed. 
            MetaEnterkeyhint_go MetaEnterkeyhintChoice = "go"
        // Typically meaning to take the user to the next field that will accept text. 
            MetaEnterkeyhint_next MetaEnterkeyhintChoice = "next"
        // Typically meaning to take the user to the previous field that will accept text. 
            MetaEnterkeyhint_previous MetaEnterkeyhintChoice = "previous"
        // Typically taking the user to the results of searching for the text they have 
// typed. 
            MetaEnterkeyhint_search MetaEnterkeyhintChoice = "search"
        // Typically delivering the text to its target. 
            MetaEnterkeyhint_send MetaEnterkeyhintChoice = "send"
        )

        // Remove the attribute ENTERKEYHINT from the element.
        func(e *METAElement) ENTERKEYHINTRemove(c MetaEnterkeyhintChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("enterkeyhint")
            return e
        }
        

    // The exportparts global attribute allows you to select and style elements 
// existing in nested shadow trees, by exporting their part names 
// The shadow tree is an isolated structure where identifiers, classes, and styles 
// cannot be reached by selectors or queries belonging to a regular DOM 
// To apply a style to an element living in a shadow tree, by CSS rule created 
// outside of it, part global attribute has to be used 
// It has to be assigned to an element present in Shadow Tree, and its value 
// should be some identifier 
// Rules present outside of the shadow tree, must use the ::part pseudo-element, 
// containing the same identifier as the argument 
// The global attribute part makes the element visible on just a single level of 
// depth 
// When the shadow tree is nested, parts will be visible only to the parent of the 
// shadow tree but not to its ancestor 
// Exporting parts further down is exactly what exportparts attribute is for 
// Attribute exportparts must be placed on a shadow Host, which is the element to 
// which the shadow tree is attached 
// The value of the attribute should be a comma-separated list of part names 
// present in the shadow tree and which should be made available via a DOM outside 
// of the current structure. 
    func(e *METAElement) EXPORTPARTS(s ...string) *METAElement{
            if e.DelimitedStrings == nil {
                e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
            }
            ds, ok := e.DelimitedStrings.Get("exportparts")
            if !ok {
                ds = NewDelimitedBuilder[string](",")
                e.DelimitedStrings.Set("exportparts", ds)
            }
            ds.Add(s...)
            return e
        }

        func(e *METAElement) IfEXPORTPARTS(condition bool, s ...string) *METAElement{
            if condition {
                e.EXPORTPARTS(s...)
            }
            return e
        }

        // Remove the attribute EXPORTPARTS from the element.
        func(e *METAElement) EXPORTPARTSRemove(s ...string) *METAElement{
            if e.DelimitedStrings == nil {
                return e
            }
            ds, ok := e.DelimitedStrings.Get("exportparts")
            if !ok {
                return e
            }
            ds.Remove(s ...)
            return e
        }

    

    // The hidden global attribute is a Boolean attribute indicating that the element 
// is not yet, or is no longer, relevant 
// For example, it can be used to hide elements of the page that can't be used 
// until the login process has been completed 
// Note that browsers typically implement hidden until found using 
// content-visibility: hidden 
// This means that unlike elements in the hidden state, elements in the hidden 
// until found state will have generated boxes, meaning that: the element will 
// participate in page layout margin, borders, padding, and background for the 
// element will be rendered 
// Also, the element needs to be affected by layout containment in order to be 
// revealed 
// This means that if the element in the hidden until found state has a display 
// value of none, contents, or inline, then the element will not be revealed by 
// find in page or fragment navigation. 
    func(e *METAElement) HIDDEN(c MetaHiddenChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("hidden", string(c))
            return e
        }

        type MetaHiddenChoice string
        const(
        // set the element to the hidden state 
// Additionally, invalid values set the element to the hidden state. 
            MetaHidden_empty MetaHiddenChoice = ""
        // set the element to the hidden state 
// Additionally, invalid values set the element to the hidden state. 
            MetaHidden_hidden MetaHiddenChoice = "hidden"
        // the element is hidden but its content will be accessible to the browser's "find 
// in page" feature or to fragment navigation 
// When these features cause a scroll to an element in a hidden until found 
// subtree, the browser will fire a beforematch event on the hidden element remove 
// the hidden attribute from the element scroll to the element 
// 			 
            MetaHidden_until_found MetaHiddenChoice = "until-found"
        )

        // Remove the attribute HIDDEN from the element.
        func(e *METAElement) HIDDENRemove(c MetaHiddenChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("hidden")
            return e
        }
        

    // The id global attribute defines a unique identifier (ID) which must be unique 
// in the whole document 
// Its purpose is to identify the element when linking (using a fragment 
// identifier), scripting, or styling (with CSS). 
    func(e *METAElement) ID(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("id", s)
            return e
        }

        func(e *METAElement) IfID(condition bool, s string) *METAElement{
            if condition {
                e.ID(s)
            }
            return e
        }

        // Remove the attribute ID from the element.
        func(e *METAElement) IDRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("id")
            return e
        }
    

    // The inert global attribute is a Boolean attribute indicating that the browser 
// will ignore the element 
// With the inert attribute, all of the element's flat tree descendants (such as 
// modal <dialog>s) that don't otherwise escape inertness are ignored 
// The inert attribute also makes the browser ignore input events sent by the 
// user, including focus-related events and events from assistive technologies 
// Specifically, inert does the following: Prevents the click event from being 
// fired when the user clicks on the element 
// Prevents the focus event from being raised by preventing the element from 
// gaining focus 
// Hides the element and its content from assistive technologies by excluding them 
// from the accessibility tree. 
    func(e *METAElement) INERT() *METAElement{
            e.INERTSet(true)
            return e
        }

        func(e *METAElement) IfINERT(condition bool) *METAElement {
            if condition {
                e.INERTSet(true)
            }
            return e
        }

        // Set the attribute INERT to the value b explicitly.
        func(e *METAElement) INERTSet(b bool) *METAElement{
            if e.BoolAttributes == nil {
                e.BoolAttributes = treemap.New[string,bool]()
            }
            e.BoolAttributes.Set("inert", b)
            return e
        }

        func (e *METAElement) IfSetINERT(condition bool, b bool) *METAElement {
            if condition {
                e.INERTSet(b)
            }
            return e
        }

        // Remove the attribute INERT from the element.
        func(e *METAElement) INERTRemove(b bool) *METAElement{
            if e.BoolAttributes == nil {
                return e
            }
            e.BoolAttributes.Del("inert")
            return e
        }

    

    // The inputmode global attribute is an enumerated attribute that hints at the 
// type of data that might be entered by the user while editing the element or its 
// contents 
// This allows a browser to display an appropriate virtual keyboard 
// It is used primarily on <input> elements, but is usable on any element in 
// contenteditable mode 
// It's important to understand that the inputmode attribute doesn't cause any 
// validity requirements to be enforced on input 
// To require that input conforms to a particular data type, choose an appropriate 
// <input> element type 
// For specific guidance on choosing <input> types, see the Values section. 
    func(e *METAElement) INPUTMODE(c MetaInputmodeChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("inputmode", string(c))
            return e
        }

        type MetaInputmodeChoice string
        const(
        // No virtual keyboard 
// For when the page implements its own keyboard input control. 
            MetaInputmode_none MetaInputmodeChoice = "none"
        // Standard input keyboard for the user's current locale. 
            MetaInputmode_empty MetaInputmodeChoice = ""
        // Standard input keyboard for the user's current locale. 
            MetaInputmode_text MetaInputmodeChoice = "text"
        // Fractional numeric input keyboard containing the digits and decimal separator 
// for the user's locale (typically  
// or ,) 
// Devices may or may not show a minus key (-). 
            MetaInputmode_decimal MetaInputmodeChoice = "decimal"
        // Numeric input keyboard, but only requires the digits 0–9 
// Devices may or may not show a minus key. 
            MetaInputmode_numeric MetaInputmodeChoice = "numeric"
        // A telephone keypad input, including the digits 0–9, the asterisk (*), and the 
// pound (#) key 
// Inputs that *require* a telephone number should typically use <input 
// type="tel"> instead. 
            MetaInputmode_tel MetaInputmodeChoice = "tel"
        // A virtual keyboard optimized for search input 
// For instance, the return/submit key may be labeled "Search", along with 
// possible other optimizations 
// Inputs that require a search query should typically use <input type="search"> 
// instead. 
            MetaInputmode_search MetaInputmodeChoice = "search"
        // A virtual keyboard optimized for entering email addresses 
// Typically includes the @character as well as other optimizations 
// Inputs that require email addresses should typically use <input type="email"> 
// instead. 
            MetaInputmode_email MetaInputmodeChoice = "email"
        // A keypad optimized for entering URLs 
// This may have the / key more prominent, for example 
// Enhanced features could include history access and so on 
// Inputs that require a URL should typically use <input type="url"> instead. 
            MetaInputmode_url MetaInputmodeChoice = "url"
        )

        // Remove the attribute INPUTMODE from the element.
        func(e *METAElement) INPUTMODERemove(c MetaInputmodeChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("inputmode")
            return e
        }
        

    // The is global attribute allows you to specify that a standard HTML element 
// should behave like a defined custom built-in element (see Using custom elements 
// for more details) 
// This attribute can only be used if the specified custom element name has been 
// successfully defined in the current document, and extends the element type it 
// is being applied to. 
    func(e *METAElement) IS(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("is", s)
            return e
        }

        func(e *METAElement) IfIS(condition bool, s string) *METAElement{
            if condition {
                e.IS(s)
            }
            return e
        }

        // Remove the attribute IS from the element.
        func(e *METAElement) ISRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("is")
            return e
        }
    

    // The itemid global attribute provides microdata in the form of a unique, global 
// identifier of an item. 
//  
// 		An itemid attribute can only be specified for an element that has both 
// itemscope and itemtype attributes 
// Also, itemid can only be specified on elements that possess an itemscope 
// attribute whose corresponding itemtype refers to or defines a vocabulary that 
// supports global identifiers 
// The exact meaning of an itemtype's global identifier is provided by the 
// definition of that identifier within the specified vocabulary 
// The vocabulary defines whether several items with the same global identifier 
// can coexist and, if so, how items with the same identifier are handled. 
    func(e *METAElement) ITEMID(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("itemid", s)
            return e
        }

        func(e *METAElement) IfITEMID(condition bool, s string) *METAElement{
            if condition {
                e.ITEMID(s)
            }
            return e
        }

        // Remove the attribute ITEMID from the element.
        func(e *METAElement) ITEMIDRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("itemid")
            return e
        }
    

    // The itemprop global attribute is used to add properties to an item 
// Every HTML element can have an itemprop attribute specified, and an itemprop 
// consists of a name-value pair 
// Each name-value pair is called a property, and a group of one or more 
// properties forms an item 
// Property values are either a string or a URL and can be associated with a very 
// wide range of elements including <audio>, <embed>, <iframe>, <img>, <link>, 
// <object>, <source>, <track>, and <video>. 
    func(e *METAElement) ITEMPROP(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("itemprop", s)
            return e
        }

        func(e *METAElement) IfITEMPROP(condition bool, s string) *METAElement{
            if condition {
                e.ITEMPROP(s)
            }
            return e
        }

        // Remove the attribute ITEMPROP from the element.
        func(e *METAElement) ITEMPROPRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("itemprop")
            return e
        }
    

    // Properties that are not descendants of an element with the itemscope attribute 
// can be associated with an item using the global attribute itemref 
// itemref provides a list of element IDs (not itemids) elsewhere in the document, 
// with additional properties The itemref attribute can only be specified on 
// elements that have an itemscope attribute specified. 
    func(e *METAElement) ITEMREF(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("itemref", s)
            return e
        }

        func(e *METAElement) IfITEMREF(condition bool, s string) *METAElement{
            if condition {
                e.ITEMREF(s)
            }
            return e
        }

        // Remove the attribute ITEMREF from the element.
        func(e *METAElement) ITEMREFRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("itemref")
            return e
        }
    

    // The itemscope global attribute is used to add an item to a microdata DOM tree 
// Every HTML element can have an itemscope attribute specified, and an itemscope 
// consists of a name-value pair 
// Each name-value pair is called a property, and a group of one or more 
// properties forms an item 
// Property values are either a string or a URL and can be associated with a very 
// wide range of elements including <audio>, <embed>, <iframe>, <img>, <link>, 
// <object>, <source>, <track>, and <video>. 
    func(e *METAElement) ITEMSCOPE() *METAElement{
            e.ITEMSCOPESet(true)
            return e
        }

        func(e *METAElement) IfITEMSCOPE(condition bool) *METAElement {
            if condition {
                e.ITEMSCOPESet(true)
            }
            return e
        }

        // Set the attribute ITEMSCOPE to the value b explicitly.
        func(e *METAElement) ITEMSCOPESet(b bool) *METAElement{
            if e.BoolAttributes == nil {
                e.BoolAttributes = treemap.New[string,bool]()
            }
            e.BoolAttributes.Set("itemscope", b)
            return e
        }

        func (e *METAElement) IfSetITEMSCOPE(condition bool, b bool) *METAElement {
            if condition {
                e.ITEMSCOPESet(b)
            }
            return e
        }

        // Remove the attribute ITEMSCOPE from the element.
        func(e *METAElement) ITEMSCOPERemove(b bool) *METAElement{
            if e.BoolAttributes == nil {
                return e
            }
            e.BoolAttributes.Del("itemscope")
            return e
        }

    

    // The itemtype global attribute is used to add types to an item 
// Every HTML element can have an itemtype attribute specified, and an itemtype 
// consists of a name-value pair 
// Each name-value pair is called a property, and a group of one or more 
// properties forms an item 
// Property values are either a string or a URL and can be associated with a very 
// wide range of elements including <audio>, <embed>, <iframe>, <img>, <link>, 
// <object>, <source>, <track>, and <video>. 
    func(e *METAElement) ITEMTYPE(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("itemtype", s)
            return e
        }

        func(e *METAElement) IfITEMTYPE(condition bool, s string) *METAElement{
            if condition {
                e.ITEMTYPE(s)
            }
            return e
        }

        // Remove the attribute ITEMTYPE from the element.
        func(e *METAElement) ITEMTYPERemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("itemtype")
            return e
        }
    

    // The lang global attribute helps define the language of an element: the language 
// that non-editable elements are written in or the language that editable 
// elements should be written in by the user 
// The tag contains one single entry value in the format defines in the Tags for 
// Identifying Languages (BCP47) IETF document 
// xml:lang has priority over it. 
    func(e *METAElement) LANG(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("lang", s)
            return e
        }

        func(e *METAElement) IfLANG(condition bool, s string) *METAElement{
            if condition {
                e.LANG(s)
            }
            return e
        }

        // Remove the attribute LANG from the element.
        func(e *METAElement) LANGRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("lang")
            return e
        }
    

    // The nonce global attribute is a unique identifier used to declare inline 
// scripts and style elements to be used in a specific document 
// It is a cryptographic nonce (number used once) that is used by Content Security 
// Policy to determine whether or not a given inline script is allowed to execute. 
    func(e *METAElement) NONCE(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("nonce", s)
            return e
        }

        func(e *METAElement) IfNONCE(condition bool, s string) *METAElement{
            if condition {
                e.NONCE(s)
            }
            return e
        }

        // Remove the attribute NONCE from the element.
        func(e *METAElement) NONCERemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("nonce")
            return e
        }
    

    // The part global attribute contains a space-separated list of the part names of 
// the element 
// Part names allows CSS to select and style specific elements in a shadow tree 
// via the ::part pseudo-element. 
    func(e *METAElement) PART(s ...string) *METAElement{
            if e.DelimitedStrings == nil {
                e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
            }
            ds, ok := e.DelimitedStrings.Get("part")
            if !ok {
                ds = NewDelimitedBuilder[string](" ")
                e.DelimitedStrings.Set("part", ds)
            }
            ds.Add(s...)
            return e
        }

        func(e *METAElement) IfPART(condition bool, s ...string) *METAElement{
            if condition {
                e.PART(s...)
            }
            return e
        }

        // Remove the attribute PART from the element.
        func(e *METAElement) PARTRemove(s ...string) *METAElement{
            if e.DelimitedStrings == nil {
                return e
            }
            ds, ok := e.DelimitedStrings.Get("part")
            if !ok {
                return e
            }
            ds.Remove(s ...)
            return e
        }

    

    // The popover global attribute is used to designate an element as a popover 
// element 
// Popover elements are hidden via display: none until opened via an 
// invoking/control element (i.e 
// a <button> or <input type="button"> with a popovertarget attribute) or a 
// HTMLElement.showPopover() call 
// When open, popover elements will appear above all other elements in the top 
// layer, and won't be influenced by parent elements' position or overflow 
// styling. 
    func(e *METAElement) POPVER(c MetaPopverChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("popver", string(c))
            return e
        }

        type MetaPopverChoice string
        const(
        // Popovers that have the auto state can be "light dismissed" by selecting outside 
// the popover area, and generally only allow one popover to be displayed 
// on-screen at a time. 
            MetaPopver_auto MetaPopverChoice = "auto"
        // Popovers that have the auto state can be "light dismissed" by selecting outside 
// the popover area, and generally only allow one popover to be displayed 
// on-screen at a time. 
            MetaPopver_empty MetaPopverChoice = ""
        // manual popovers must always be explicitly hidden, but allow for use cases such 
// as nested popovers in menus. 
            MetaPopver_manual MetaPopverChoice = "manual"
        )

        // Remove the attribute POPVER from the element.
        func(e *METAElement) POPVERRemove(c MetaPopverChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("popver")
            return e
        }
        

    // The slot global attribute assigns a slot in a shadow DOM shadow tree to an 
// element: An element with a slot attribute is assigned to the slot created by 
// the <slot> element whose name attribute's value matches that slot attribute's 
// value. 
    func(e *METAElement) SLOT(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("slot", s)
            return e
        }

        func(e *METAElement) IfSLOT(condition bool, s string) *METAElement{
            if condition {
                e.SLOT(s)
            }
            return e
        }

        // Remove the attribute SLOT from the element.
        func(e *METAElement) SLOTRemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("slot")
            return e
        }
    

    // The spellcheck global attribute is an enumerated attribute that defines whether 
// the element may be checked for spelling errors 
// If this attribute is not set, its default value is element-type and 
// browser-defined 
// This default value may also be inherited, which means that the element content 
// will be checked for spelling errors only if its nearest ancestor has a 
// spellcheck state of true 
// Security and privacy concerns Using spellchecking can have consequences for 
// users' security and privacy 
// The specification does not regulate how spellchecking is done and the content 
// of the element may be sent to a third party for spellchecking results (see 
// enhanced spellchecking and "spell-jacking") 
// You should consider setting spellcheck to false for elements that can contain 
// sensitive information. 
    func(e *METAElement) SPELLCHECK(c MetaSpellcheckChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("spellcheck", string(c))
            return e
        }

        type MetaSpellcheckChoice string
        const(
        // The element will be checked for spelling errors. 
            MetaSpellcheck_empty MetaSpellcheckChoice = ""
        // The element will be checked for spelling errors. 
            MetaSpellcheck_true MetaSpellcheckChoice = "true"
        // The element will not be checked for spelling errors. 
            MetaSpellcheck_false MetaSpellcheckChoice = "false"
        )

        // Remove the attribute SPELLCHECK from the element.
        func(e *METAElement) SPELLCHECKRemove(c MetaSpellcheckChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("spellcheck")
            return e
        }
        

    // The style global attribute is used to add styles to an element, such as color, 
// font, size, and more 
// Styles are written in CSS. 
    func (e *METAElement) STYLEF(k string, format string, args ...any) *METAElement {
            return e.STYLE(k, fmt.Sprintf(format, args...))
        }

        func (e *METAElement) IfSTYLE(condition bool, k string, v string) *METAElement {
            if condition {
                e.STYLE(k, v)
            }
            return e
        }

        func (e *METAElement) STYLE(k string, v string) *METAElement {
            if e.KVStrings == nil {
                e.KVStrings = treemap.New[string,*KVBuilder]()
            }
            kv, ok := e.KVStrings.Get("style")
            if !ok {
                kv = NewKVBuilder(":", ";")
                e.KVStrings.Set("style", kv)
            }
            kv.Add(k, v)
            return e
        }

        func (e *METAElement) IfSTYLEF(condition bool, k string, format string, args ...any) *METAElement {
            if condition {
                e.STYLE(k, fmt.Sprintf(format, args...))
            }
            return e
        }

        // Add the attributes in the map to the element.
        func (e *METAElement) STYLEMap(m map[string]string) *METAElement {
            if e.KVStrings == nil {
                e.KVStrings = treemap.New[string,*KVBuilder]()
            }
            kv, ok := e.KVStrings.Get("style")
            if !ok {
                kv = NewKVBuilder(":", ";")
                e.KVStrings.Set("style", kv)
            }
            for k, v := range m {
                kv.Add(k, v)
            }
            return e
        }

        // Add pairs of attributes to the element.
        func (e *METAElement) STYLEPairs(pairs ...string) *METAElement {
            if len(pairs) % 2 != 0 {
                panic("Must have an even number of pairs")
            }
            if e.KVStrings == nil {
                e.KVStrings = treemap.New[string,*KVBuilder]()
            }
            kv, ok := e.KVStrings.Get("style")
            if !ok {
                kv = NewKVBuilder(":", ";")
                e.KVStrings.Set("style", kv)
            }

            for i := 0; i < len(pairs); i += 2 {
                kv.Add(pairs[i], pairs[i+1])
            }

            return e
        }

        func (e *METAElement) IfSTYLEPairs(condition bool, pairs ...string) *METAElement {
            if condition {
                e.STYLEPairs(pairs...)
            }
            return e
        }

        // Remove the attribute STYLE from the element.
        func (e *METAElement) STYLERemove(keys ...string) *METAElement {
            if e.KVStrings == nil {
                return e
            }
            kv, ok := e.KVStrings.Get("style")
            if !ok {
                return e
            }
            for _, k := range keys {
                kv.Remove(k)
            }
            return e
        }

    

    // The tabindex global attribute indicates if its element can be focused, and 
// if/where it participates in sequential keyboard navigation (usually with the 
// Tab key, hence the name) 
// It accepts an integer as a value, with different results depending on the 
// integer's value: a negative value (usually tabindex="-1") means that the 
// element should be focusable, but should not be reachable via sequential 
// keyboard navigation; a value of 0 (tabindex="0") means that the element should 
// be focusable and reachable via sequential keyboard navigation, but its relative 
// order is defined by the platform convention; a positive value means should be 
// focusable and reachable via sequential keyboard navigation; its relative order 
// is defined by the value of the attribute: the sequential follow the increasing 
// number of the tabindex 
// If several elements share the same tabindex, their relative order follows their 
// relative position in the document. 
    func(e *METAElement) TABINDEX(i int) *METAElement{
            if e.IntAttributes == nil {
                e.IntAttributes = treemap.New[string,int]()
            }
            e.IntAttributes.Set("tabindex", i)
            return e
        }

        func (e *METAElement) IfTABINDEX(condition bool, i int) *METAElement {
            if condition {
                e.TABINDEX(i)
            }
            return e
        }

        // Remove the attribute TABINDEX from the element.
        func(e *METAElement) TABINDEXRemove(i int) *METAElement{
            if e.IntAttributes == nil {
                return e
            }
            e.IntAttributes.Del("tabindex")
            return e
        }
        

    // The title global attribute contains text representing advisory information 
// related to the element it belongs to 
// Such information can typically, but not necessarily, be presented to the user 
// as a tooltip 
// The main use of the title attribute is to label <iframe> elements for assistive 
// technology 
// The title attribute may also be used to label controls in data tables 
// The title attribute, when added to <link rel="stylesheet">, creates an 
// alternate stylesheet 
// When defining an alternative style sheet with <link rel="alternate"> the 
// attribute is required and must be set to a non-empty string 
// If included on the <abbr> opening tag, the title must be a full expansion of 
// the abbreviation or acronym 
// Instead of using title, when possible, provide an expansion of the abbreviation 
// or acronym in plain text on first use, using the <abbr> to mark up the 
// abbreviation 
// This enables all users know what name or term the abbreviation or acronym 
// shortens while providing a hint to user agents on how to announce the content 
// While title can be used to provide a programmatically associated label for an 
// <input> element, this is not good practice 
// Use a <label> instead. 
    func(e *METAElement) TITLE(s string) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("title", s)
            return e
        }

        func(e *METAElement) IfTITLE(condition bool, s string) *METAElement{
            if condition {
                e.TITLE(s)
            }
            return e
        }

        // Remove the attribute TITLE from the element.
        func(e *METAElement) TITLERemove(s string) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("title")
            return e
        }
    

    // The translate global attribute is an enumerated attribute that is used to 
// specify whether an element's attribute values and the values of its Text node 
// children are to be translated when the page is localized, or whether to leave 
// them unchanged. 
    func(e *METAElement) TRANSLATE(c MetaTranslateChoice) *METAElement{
            if e.StringAttributes == nil {
                e.StringAttributes = treemap.New[string,string]()
            }
            e.StringAttributes.Set("translate", string(c))
            return e
        }

        type MetaTranslateChoice string
        const(
        // indicates that the element should be translated when the page is localized. 
            MetaTranslate_empty MetaTranslateChoice = ""
        // indicates that the element should be translated when the page is localized. 
            MetaTranslate_yes MetaTranslateChoice = "yes"
        // indicates that the element must not be translated when the page is localized. 
            MetaTranslate_no MetaTranslateChoice = "no"
        )

        // Remove the attribute TRANSLATE from the element.
        func(e *METAElement) TRANSLATERemove(c MetaTranslateChoice) *METAElement{
            if e.StringAttributes == nil {
                return e
            }
            e.StringAttributes.Del("translate")
            return e
        }
        

    // Merges the store with the given object 
    
        func(e *METAElement) DATASTAR_MERGE_STORE(v any) *METAElement{
                if e.CustomDataAttributes == nil {
                    e.CustomDataAttributes = treemap.New[string,string]()
                }
                b, err := json.Marshal(v)
                if err != nil {
                    panic(err)
                }
                e.CustomDataAttributes.Set("data-merge-store", string(b))
                return e
            }

        

    // Sets the reference of the element 
    
        func(e *METAElement) DATASTAR_REF(expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key := "data-ref"
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_REF(condition bool, expression string) *METAElement{
                if condition {
                    e.DATASTAR_REF( expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_REF from the element.
            func(e *METAElement) DATASTAR_REFRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-ref")
                return e
            }

        

    // Sets the value of the element 
    
        func(e *METAElement) DATASTAR_BIND(key string, expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key = fmt.Sprintf("data-bind-%s", key)
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_BIND(condition bool, key string, expression string) *METAElement{
                if condition {
                    e.DATASTAR_BIND(key,  expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_BIND from the element.
            func(e *METAElement) DATASTAR_BINDRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-bind")
                return e
            }

        

    // Sets the value of the element 
    
        func(e *METAElement) DATASTAR_MODEL(expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key := "data-model"
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_MODEL(condition bool, expression string) *METAElement{
                if condition {
                    e.DATASTAR_MODEL( expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_MODEL from the element.
            func(e *METAElement) DATASTAR_MODELRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-model")
                return e
            }

        

    // Sets the textContent of the element 
    
        func(e *METAElement) DATASTAR_TEXT(expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key := "data-text"
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_TEXT(condition bool, expression string) *METAElement{
                if condition {
                    e.DATASTAR_TEXT( expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_TEXT from the element.
            func(e *METAElement) DATASTAR_TEXTRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-text")
                return e
            }

        

    // Sets the event handler of the element 
    
        type MetaDataOnMod customDataKeyModifier

            
            // Debounces the event handler 
            func MetaDataOnModDebounce(
                    d time.Duration,
            ) MetaDataOnMod {
                return func() string {return fmt.Sprintf("debounce_%dms", d.Milliseconds())
                }
            }
            
            // Throttles the event handler 
            func MetaDataOnModThrottle(
                    d time.Duration,
            ) MetaDataOnMod {
                return func() string {return fmt.Sprintf("throttle_%dms", d.Milliseconds())
                }
            }
            
        func(e *METAElement) DATASTAR_ON(key string, expression string, modifiers ...MetaDataOnMod) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key = fmt.Sprintf("data-on-%s", key)
                
                customMods := lo.Map(modifiers, func(m MetaDataOnMod, i int) customDataKeyModifier  {
                    return customDataKeyModifier(m)
                })
                key = customDataKey(key, customMods...)
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_ON(condition bool, key string, expression string, modifiers ...MetaDataOnMod) *METAElement{
                if condition {
                    e.DATASTAR_ON(key,  expression,  modifiers...)
                }
                return e
            }

            // Remove the attribute DATASTAR_ON from the element.
            func(e *METAElement) DATASTAR_ONRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-on")
                return e
            }

        

    // Sets the focus of the element 
    
        func(e *METAElement) DATASTAR_FOCUSSet(b bool) *METAElement{
                key := "data-focus"
                e.BoolAttributes.Set(key, b)
                return e
            }

            func(e *METAElement) DATASTAR_FOCUS() *METAElement{
                return e.DATASTAR_FOCUSSet(true)
            }
        

    // Sets the header of for fetch requests 
    
        func(e *METAElement) DATASTAR_HEADER(key string, expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key = fmt.Sprintf("data-header-%s", key)
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_HEADER(condition bool, key string, expression string) *METAElement{
                if condition {
                    e.DATASTAR_HEADER(key,  expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_HEADER from the element.
            func(e *METAElement) DATASTAR_HEADERRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-header")
                return e
            }

        

    // Sets the URL for fetch requests 
    
        func(e *METAElement) DATASTAR_FETCH_URL(expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key := "data-fetch-url"
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_FETCH_URL(condition bool, expression string) *METAElement{
                if condition {
                    e.DATASTAR_FETCH_URL( expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_FETCH_URL from the element.
            func(e *METAElement) DATASTAR_FETCH_URLRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-fetch-url")
                return e
            }

        

    // Sets the indicator selector for fetch requests 
    
        func(e *METAElement) DATASTAR_FETCH_INDICATOR(expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key := "DatastarFetchIndicator"
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_FETCH_INDICATOR(condition bool, expression string) *METAElement{
                if condition {
                    e.DATASTAR_FETCH_INDICATOR( expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_FETCH_INDICATOR from the element.
            func(e *METAElement) DATASTAR_FETCH_INDICATORRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("DatastarFetchIndicator")
                return e
            }

        

    // Sets the visibility of the element 
    
        func(e *METAElement) DATASTAR_SHOWSet(b bool) *METAElement{
                key := "data-show"
                e.BoolAttributes.Set(key, b)
                return e
            }

            func(e *METAElement) DATASTAR_SHOW() *METAElement{
                return e.DATASTAR_SHOWSet(true)
            }
        

    // Triggers the callback when the element intersects the viewport 
    
        func(e *METAElement) DATASTAR_INTERSECTSSet(b bool) *METAElement{
                key := "data-intersects"
                e.BoolAttributes.Set(key, b)
                return e
            }

            func(e *METAElement) DATASTAR_INTERSECTS() *METAElement{
                return e.DATASTAR_INTERSECTSSet(true)
            }
        

    // Teleports the element to the given selector 
    
        func(e *METAElement) DATASTAR_TELEPORTSet(b bool) *METAElement{
                key := "data-teleport"
                e.BoolAttributes.Set(key, b)
                return e
            }

            func(e *METAElement) DATASTAR_TELEPORT() *METAElement{
                return e.DATASTAR_TELEPORTSet(true)
            }
        

    // Scrolls the element into view 
    
        func(e *METAElement) DATASTAR_SCROLL_INTO_VIEWSet(b bool) *METAElement{
                key := "data-scroll-into-view"
                e.BoolAttributes.Set(key, b)
                return e
            }

            func(e *METAElement) DATASTAR_SCROLL_INTO_VIEW() *METAElement{
                return e.DATASTAR_SCROLL_INTO_VIEWSet(true)
            }
        

    // Setup the ViewTransitionAPI for the element 
    
        func(e *METAElement) DATASTAR_VIEW_TRANSITION(key string, expression string) *METAElement{
                if e.StringAttributes == nil {
                    e.StringAttributes = treemap.New[string,string]()
                }
                
                key = fmt.Sprintf("data-view-transition-%s", key)
                
                e.StringAttributes.Set(key, expression)
                return e
            }

            func(e *METAElement) IfDATASTAR_VIEW_TRANSITION(condition bool, key string, expression string) *METAElement{
                if condition {
                    e.DATASTAR_VIEW_TRANSITION(key,  expression, )
                }
                return e
            }

            // Remove the attribute DATASTAR_VIEW_TRANSITION from the element.
            func(e *METAElement) DATASTAR_VIEW_TRANSITIONRemove() *METAElement{
                if e.StringAttributes == nil {
                    return e
                }
                e.StringAttributes.Del("data-view-transition")
                return e
            }

        



