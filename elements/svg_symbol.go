// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg symbol is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <symbol> SVG element is used to define graphical template objects which can
// be instantiated by a <use> element
// The use of symbol elements for graphics that are used multiple times in the
// same document adds structure and semantics
// Documents that are rich in structure may be rendered graphically, as speech, or
// as Braille, and thus promote accessibility
// note that a symbol element itself is not rendered
// Only instances of a symbol element (i.e., a reference to a symbol by a <use>
// element) are rendered
// To render a 'stand-alone' graphic that has been defined using a symbol, a
// reference to the symbol is referenced using a <use> element.
type SVGSYMBOLElement struct {
	*Element
}

// Create a new SVGSYMBOLElement element.
// This will create a new element with the tag
// "symbol" during rendering.
func SVG_SYMBOL(children ...ElementRenderer) *SVGSYMBOLElement {
	e := NewElement("symbol", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGSYMBOLElement{Element: e}
}

func (e *SVGSYMBOLElement) Children(children ...ElementRenderer) *SVGSYMBOLElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGSYMBOLElement) IfChildren(condition bool, children ...ElementRenderer) *SVGSYMBOLElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGSYMBOLElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGSYMBOLElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGSYMBOLElement) Text(text string) *SVGSYMBOLElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGSYMBOLElement) TextF(format string, args ...any) *SVGSYMBOLElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGSYMBOLElement) Escaped(text string) *SVGSYMBOLElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGSYMBOLElement) EscapedF(format string, args ...any) *SVGSYMBOLElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGSYMBOLElement) CustomData(key, value string) *SVGSYMBOLElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGSYMBOLElement) CustomDataRemove(key string) *SVGSYMBOLElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// Indicates how the fetched image is fitted into the destination rectangle.
func (e *SVGSYMBOLElement) PRESERVEASPECTRATIO(c SVGSymbolPreserveAspectRatioChoice) *SVGSYMBOLElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("preserveAspectRatio", string(c))
	return e
}

type SVGSymbolPreserveAspectRatioChoice string

const (
	// Do not force uniform scaling.
	SVGSymbolPreserveAspectRatio_none SVGSymbolPreserveAspectRatioChoice = "none"
	// Scale the image to the smallest size such that both its width and its height
	// can completely fit inside the corresponding dimension of the viewPort.
	SVGSymbolPreserveAspectRatio_xMinYMin SVGSymbolPreserveAspectRatioChoice = "xMinYMin"
	// Align the image along the middle of the corresponding dimension of the
	// viewPort.
	SVGSymbolPreserveAspectRatio_xMidYMin SVGSymbolPreserveAspectRatioChoice = "xMidYMin"
	// Align the image with the corresponding side of the viewPort.
	SVGSymbolPreserveAspectRatio_xMaxYMin SVGSymbolPreserveAspectRatioChoice = "xMaxYMin"
	// Align the image along the middle of the corresponding dimension of the
	// viewPort.
	SVGSymbolPreserveAspectRatio_xMinYMid SVGSymbolPreserveAspectRatioChoice = "xMinYMid"
	// Scale the image to the smallest size such that it can completely fit inside the
	// corresponding dimension of the viewPort.
	SVGSymbolPreserveAspectRatio_xMidYMid SVGSymbolPreserveAspectRatioChoice = "xMidYMid"
	// Align the image with the corresponding side of the viewPort.
	SVGSymbolPreserveAspectRatio_xMaxYMid SVGSymbolPreserveAspectRatioChoice = "xMaxYMid"
	// Align the image along the middle of the corresponding dimension of the
	// viewPort.
	SVGSymbolPreserveAspectRatio_xMinYMax SVGSymbolPreserveAspectRatioChoice = "xMinYMax"
	// Align the image with the corresponding side of the viewPort.
	SVGSymbolPreserveAspectRatio_xMidYMax SVGSymbolPreserveAspectRatioChoice = "xMidYMax"
	// Scale the image to the smallest size such that both its width and its height
	// can completely fit inside the corresponding dimension of the viewPort.
	SVGSymbolPreserveAspectRatio_xMaxYMax SVGSymbolPreserveAspectRatioChoice = "xMaxYMax"
)

// Remove the attribute preserveAspectRatio from the element.
func (e *SVGSYMBOLElement) PRESERVEASPECTRATIORemove(c SVGSymbolPreserveAspectRatioChoice) *SVGSYMBOLElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("preserveAspectRatio")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGSYMBOLElement) CLASS(s ...string) *SVGSYMBOLElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

// Remove the attribute class from the element.
func (e *SVGSYMBOLElement) CLASSRemove(s ...string) *SVGSYMBOLElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGSYMBOLElement) ID(s string) *SVGSYMBOLElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

// Remove the attribute id from the element.
func (e *SVGSYMBOLElement) IDRemove(s string) *SVGSYMBOLElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGSYMBOLElement) STYLE(k string, v string) *SVGSYMBOLElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

// Add the attributes in the map to the element.
func (e *SVGSYMBOLElement) STYLEMap(m map[string]string) *SVGSYMBOLElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGSYMBOLElement) STYLEPairs(pairs ...string) *SVGSYMBOLElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

// Remove the attribute style from the element.
func (e *SVGSYMBOLElement) STYLERemove(keys ...string) *SVGSYMBOLElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
