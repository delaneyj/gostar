// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package mathml maction is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// This element is used to specify the behavior of a subexpression when it is
// activated by the user
// The action can be to toggle the visibility of the subexpression, or to toggle
// the selection of the subexpression, or to execute a script.
type MathMLMACTIONElement struct {
	*Element
}

// Create a new MathMLMACTIONElement element.
// This will create a new element with the tag
// "maction" during rendering.
func MathML_MACTION(children ...ElementRenderer) *MathMLMACTIONElement {
	e := NewElement("maction", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &MathMLMACTIONElement{Element: e}
}

func (e *MathMLMACTIONElement) Children(children ...ElementRenderer) *MathMLMACTIONElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *MathMLMACTIONElement) IfChildren(condition bool, children ...ElementRenderer) *MathMLMACTIONElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *MathMLMACTIONElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *MathMLMACTIONElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *MathMLMACTIONElement) Text(text string) *MathMLMACTIONElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *MathMLMACTIONElement) TextF(format string, args ...any) *MathMLMACTIONElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *MathMLMACTIONElement) IfText(condition bool, text string) *MathMLMACTIONElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(text))
	}
	return e
}

func (e *MathMLMACTIONElement) IfTextF(condition bool, format string, args ...any) *MathMLMACTIONElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
	}
	return e
}

func (e *MathMLMACTIONElement) Escaped(text string) *MathMLMACTIONElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *MathMLMACTIONElement) IfEscaped(condition bool, text string) *MathMLMACTIONElement {
	if condition {
		e.Descendants = append(e.Descendants, Escaped(text))
	}
	return e
}

func (e *MathMLMACTIONElement) EscapedF(format string, args ...any) *MathMLMACTIONElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *MathMLMACTIONElement) IfEscapedF(condition bool, format string, args ...any) *MathMLMACTIONElement {
	if condition {
		e.Descendants = append(e.Descendants, EscapedF(format, args...))
	}
	return e
}

func (e *MathMLMACTIONElement) CustomData(key, value string) *MathMLMACTIONElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *MathMLMACTIONElement) IfCustomData(condition bool, key, value string) *MathMLMACTIONElement {
	if condition {
		e.CustomData(key, value)
	}
	return e
}

func (e *MathMLMACTIONElement) CustomDataF(key, format string, args ...any) *MathMLMACTIONElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *MathMLMACTIONElement) IfCustomDataF(condition bool, key, format string, args ...any) *MathMLMACTIONElement {
	if condition {
		e.CustomData(key, fmt.Sprintf(format, args...))
	}
	return e
}

func (e *MathMLMACTIONElement) CustomDataRemove(key string) *MathMLMACTIONElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// This attribute specifies the type of action performed when the element is
// activated
// Possible values are toggle, statusline, tooltip, and script.
func (e *MathMLMACTIONElement) ACTIONTYPE(c MathMLMactionActiontypeChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("actiontype", string(c))
	return e
}

type MathMLMactionActiontypeChoice string

const (
	MathMLMactionActiontype_toggle MathMLMactionActiontypeChoice = "toggle"

	MathMLMactionActiontype_statusline MathMLMactionActiontypeChoice = "statusline"

	MathMLMactionActiontype_tooltip MathMLMactionActiontypeChoice = "tooltip"

	MathMLMactionActiontype_script MathMLMactionActiontypeChoice = "script"
)

// Remove the attribute actiontype from the element.
func (e *MathMLMACTIONElement) ACTIONTYPERemove(c MathMLMactionActiontypeChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("actiontype")
	return e
}

// This attribute specifies the type of selection performed when the element is
// activated
// Possible values are none, highlight, and unhighlight.
func (e *MathMLMACTIONElement) SELECTION(c MathMLMactionSelectionChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("selection", string(c))
	return e
}

type MathMLMactionSelectionChoice string

const (
	MathMLMactionSelection_none MathMLMactionSelectionChoice = "none"

	MathMLMactionSelection_highlight MathMLMactionSelectionChoice = "highlight"

	MathMLMactionSelection_unhighlight MathMLMactionSelectionChoice = "unhighlight"
)

// Remove the attribute selection from the element.
func (e *MathMLMACTIONElement) SELECTIONRemove(c MathMLMactionSelectionChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("selection")
	return e
}

// Assigns a class name or set of class names to an element
// You may assign the same class name or names to any number of elements
// If you specify multiple class names, they must be separated by whitespace
// characters.
func (e *MathMLMACTIONElement) CLASS(s ...string) *MathMLMACTIONElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

func (e *MathMLMACTIONElement) IfCLASS(condition bool, s ...string) *MathMLMACTIONElement {
	if condition {
		e.CLASS(s...)
	}
	return e
}

// Remove the attribute class from the element.
func (e *MathMLMACTIONElement) CLASSRemove(s ...string) *MathMLMACTIONElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// This attribute specifies the text directionality of the element, merely
// indicating what direction the text flows when surrounded by text with inherent
// directionality (such as Arabic or Hebrew)
// Possible values are ltr (left-to-right) and rtl (right-to-left).
func (e *MathMLMACTIONElement) DIR(c MathMLMactionDirChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("dir", string(c))
	return e
}

type MathMLMactionDirChoice string

const (
	// left-to-right
	MathMLMactionDir_ltr MathMLMactionDirChoice = "ltr"
	// right-to-left
	MathMLMactionDir_rtl MathMLMactionDirChoice = "rtl"
)

// Remove the attribute dir from the element.
func (e *MathMLMACTIONElement) DIRRemove(c MathMLMactionDirChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("dir")
	return e
}

// This attribute specifies whether the element should be rendered using
// displaystyle rules or not
// Possible values are true and false.
func (e *MathMLMACTIONElement) DISPLAYSTYLE(c MathMLMactionDisplaystyleChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("displaystyle", string(c))
	return e
}

type MathMLMactionDisplaystyleChoice string

const (
	// displaystyle rules
	MathMLMactionDisplaystyle_true MathMLMactionDisplaystyleChoice = "true"
	// not displaystyle rules
	MathMLMactionDisplaystyle_false MathMLMactionDisplaystyleChoice = "false"
)

// Remove the attribute displaystyle from the element.
func (e *MathMLMACTIONElement) DISPLAYSTYLERemove(c MathMLMactionDisplaystyleChoice) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("displaystyle")
	return e
}

// This attribute assigns a name to an element
// This name must be unique in a document.
func (e *MathMLMACTIONElement) ID(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

func (e *MathMLMACTIONElement) IfID(condition bool, s string) *MathMLMACTIONElement {
	if condition {
		e.ID(s)
	}
	return e
}

// Remove the attribute id from the element.
func (e *MathMLMACTIONElement) IDRemove(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// This attribute specifies the background color of the element
// Possible values are a color name or a color specification in the format defined
// in the CSS3 Color Module [CSS3COLOR].
func (e *MathMLMACTIONElement) MATHBACKGROUND(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("mathbackground", s)
	return e
}

func (e *MathMLMACTIONElement) IfMATHBACKGROUND(condition bool, s string) *MathMLMACTIONElement {
	if condition {
		e.MATHBACKGROUND(s)
	}
	return e
}

// Remove the attribute mathbackground from the element.
func (e *MathMLMACTIONElement) MATHBACKGROUNDRemove(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("mathbackground")
	return e
}

// This attribute specifies the color of the element
// Possible values are a color name or a color specification in the format defined
// in the CSS3 Color Module [CSS3COLOR].
func (e *MathMLMACTIONElement) MATHCOLOR(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("mathcolor", s)
	return e
}

func (e *MathMLMACTIONElement) IfMATHCOLOR(condition bool, s string) *MathMLMACTIONElement {
	if condition {
		e.MATHCOLOR(s)
	}
	return e
}

// Remove the attribute mathcolor from the element.
func (e *MathMLMACTIONElement) MATHCOLORRemove(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("mathcolor")
	return e
}

// This attribute specifies the size of the element
// Possible values are a dimension or a dimensionless number.
func (e *MathMLMACTIONElement) MATHSIZESTR(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("mathsize", s)
	return e
}

func (e *MathMLMACTIONElement) IfMATHSIZESTR(condition bool, s string) *MathMLMACTIONElement {
	if condition {
		e.MATHSIZESTR(s)
	}
	return e
}

// Remove the attribute mathsizeStr from the element.
func (e *MathMLMACTIONElement) MATHSIZESTRRemove(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("mathsize")
	return e
}

// This attribute declares a cryptographic nonce (number used once) that should be
// used by the server processing the element’s submission, and the resulting
// resource must be delivered with a Content-Security-Policy nonce attribute
// matching the value of the nonce attribute.
func (e *MathMLMACTIONElement) NONCE(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("nonce", s)
	return e
}

func (e *MathMLMACTIONElement) IfNONCE(condition bool, s string) *MathMLMACTIONElement {
	if condition {
		e.NONCE(s)
	}
	return e
}

// Remove the attribute nonce from the element.
func (e *MathMLMACTIONElement) NONCERemove(s string) *MathMLMACTIONElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("nonce")
	return e
}

// This attribute specifies the script level of the element
// Possible values are an integer between 0 and 7, inclusive.
func (e *MathMLMACTIONElement) SCRIPTLEVEL(i int) *MathMLMACTIONElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("scriptlevel", i)
	return e
}

func (e *MathMLMACTIONElement) IfSCRIPTLEVEL(condition bool, i int) *MathMLMACTIONElement {
	if condition {
		e.SCRIPTLEVEL(i)
	}
	return e
}

// Remove the attribute scriptlevel from the element.
func (e *MathMLMACTIONElement) SCRIPTLEVELRemove(i int) *MathMLMACTIONElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("scriptlevel")
	return e
}

// This attribute offers advisory information about the element for which it is
// set.
func (e *MathMLMACTIONElement) STYLEF(k string, format string, args ...any) *MathMLMACTIONElement {
	return e.STYLE(k, fmt.Sprintf(format, args...))
}

func (e *MathMLMACTIONElement) IfSTYLE(condition bool, k string, v string) *MathMLMACTIONElement {
	if condition {
		e.STYLE(k, v)
	}
	return e
}

func (e *MathMLMACTIONElement) STYLE(k string, v string) *MathMLMACTIONElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

func (e *MathMLMACTIONElement) IfSTYLEF(condition bool, k string, format string, args ...any) *MathMLMACTIONElement {
	if condition {
		e.STYLE(k, fmt.Sprintf(format, args...))
	}
	return e
}

// Add the attributes in the map to the element.
func (e *MathMLMACTIONElement) STYLEMap(m map[string]string) *MathMLMACTIONElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *MathMLMACTIONElement) STYLEPairs(pairs ...string) *MathMLMACTIONElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

func (e *MathMLMACTIONElement) IfSTYLEPairs(condition bool, pairs ...string) *MathMLMACTIONElement {
	if condition {
		e.STYLEPairs(pairs...)
	}
	return e
}

// Remove the attribute style from the element.
func (e *MathMLMACTIONElement) STYLERemove(keys ...string) *MathMLMACTIONElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}

// This attribute specifies the position of the current element in the tabbing
// order for the current document
// This value must be a number between 0 and 32767
// User agents should ignore leading zeros.
func (e *MathMLMACTIONElement) TABINDEX(i int) *MathMLMACTIONElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("tabindex", i)
	return e
}

func (e *MathMLMACTIONElement) IfTABINDEX(condition bool, i int) *MathMLMACTIONElement {
	if condition {
		e.TABINDEX(i)
	}
	return e
}

// Remove the attribute tabindex from the element.
func (e *MathMLMACTIONElement) TABINDEXRemove(i int) *MathMLMACTIONElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("tabindex")
	return e
}
