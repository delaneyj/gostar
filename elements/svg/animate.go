// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg is generated from configuration file.
// Description:
// Scalable Vector Graphics (SVG) is an XML-based markup language for describing 
// two-dimensional based vector graphics 
// As such, it's a text-based, open Web standard for describing images that can be 
// rendered cleanly at any size and are designed specifically to work well with 
// other web standards including CSS, DOM, JavaScript, and SMIL 
// SVG is, essentially, to graphics what HTML is to text 
// SVG images and their related behaviors are defined in XML text files, which 
// means they can be searched, indexed, scripted, and compressed 
// Additionally, this means they can be created and edited with any text editor or 
// with drawing software 
// Compared to classic bitmapped image formats such as JPEG or PNG, SVG-format 
// vector images can be rendered at any size without loss of quality and can be 
// easily localized by updating the text within them, without the need of a 
// graphical editor to do so 
// With proper libraries, SVG files can even be localized on-the-fly. 
package svg

import(
    "fmt"
    "github.com/igrmk/treemap/v2"
)

// The <animate> SVG element is used to animate an attribute or property of an 
// element over time. 
type ANIMATEElementBuilder struct {
    *ElementBuilder
}

// Create a new ANIMATEElementBuilder element.
// This will create a new element with the tag
// "animate" during rendering.
func ANIMATE(children ...ElementRenderer) *ANIMATEElementBuilder {
    return &ANIMATEElementBuilder{
        ElementBuilder: &ElementBuilder{
            Tag: []byte("animate"),
            IsSelfClosing: false,
            Descendants: children,
		},
    }
}

func (e *ANIMATEElementBuilder) Children(children ...ElementRenderer) *ANIMATEElementBuilder {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *ANIMATEElementBuilder) IfChildren(condition bool, children ...ElementRenderer) *ANIMATEElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *ANIMATEElementBuilder) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *ANIMATEElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *ANIMATEElementBuilder) Text(text string) *ANIMATEElementBuilder {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *ANIMATEElementBuilder) TextF(format string, args ...any) *ANIMATEElementBuilder {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *ANIMATEElementBuilder) Escaped(text string) *ANIMATEElementBuilder {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *ANIMATEElementBuilder) EscapedF(format string, args ...any) *ANIMATEElementBuilder {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *ANIMATEElementBuilder) CustomData(key, value string) *ANIMATEElementBuilder {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *ANIMATEElementBuilder) CustomDataRemove(key string) *ANIMATEElementBuilder {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}


// Defines the initial value of the attribute. 
func(e *ANIMATEElementBuilder) FROM(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("from", s)
    return e
}

// Remove the attribute from from the element.
func(e *ANIMATEElementBuilder) FROMRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("from")
    return e
}


// Defines the duration for repeating an animation. 
func(e *ANIMATEElementBuilder) REPEATDUR(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("repeatDur", s)
    return e
}

// Remove the attribute repeatDur from the element.
func(e *ANIMATEElementBuilder) REPEATDURRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("repeatDur")
    return e
}


// Controls whether or not the animation is cumulative. 
func(e *ANIMATEElementBuilder) ACCUMULATE(c AnimateAccumulateChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("accumulate", string(c))
    return e
}

type AnimateAccumulateChoice string
const(
// The animation is not cumulative 
// Each iteration starts over from the beginning. 
    AnimateAccumulate_none AnimateAccumulateChoice = "none"
// The animation is cumulative 
// Each iteration the animation picks up where it left off in the previous 
// iteration. 
    AnimateAccumulate_sum AnimateAccumulateChoice = "sum"
)

// Remove the attribute accumulate from the element.
func(e *ANIMATEElementBuilder) ACCUMULATERemove(c AnimateAccumulateChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("accumulate")
    return e
}


// The namespace of the attribute to animate. 
func(e *ANIMATEElementBuilder) ATTRIBUTETYPE(c AnimateAttributeTypeChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("attributeType", string(c))
    return e
}

type AnimateAttributeTypeChoice string
const(
// If the attribute is a presentation attribute, the animation will use the target 
// element's corresponding baseVal 
// If the attribute is not a presentation attribute, the animation will use the 
// target element's corresponding animVal. 
    AnimateAttributeType_auto AnimateAttributeTypeChoice = "auto"
// The animation will use the CSS namespace. 
    AnimateAttributeType_CSS AnimateAttributeTypeChoice = "CSS"
// The animation will use the XML namespace. 
    AnimateAttributeType_XML AnimateAttributeTypeChoice = "XML"
// The animation will use the XML ID namespace. 
    AnimateAttributeType_XMLID AnimateAttributeTypeChoice = "XMLID"
// The animation will use the XML LANG namespace. 
    AnimateAttributeType_XMLLANG AnimateAttributeTypeChoice = "XMLLANG"
// The animation will use the XML SPACE namespace. 
    AnimateAttributeType_XMLSPACE AnimateAttributeTypeChoice = "XMLSPACE"
)

// Remove the attribute attributeType from the element.
func(e *ANIMATEElementBuilder) ATTRIBUTETYPERemove(c AnimateAttributeTypeChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("attributeType")
    return e
}


// Defines when the animation should begin. 
func(e *ANIMATEElementBuilder) BEGIN(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("begin", s)
    return e
}

// Remove the attribute begin from the element.
func(e *ANIMATEElementBuilder) BEGINRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("begin")
    return e
}


// Defines a relative offset value for the animation. 
func(e *ANIMATEElementBuilder) BY(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("by", s)
    return e
}

// Remove the attribute by from the element.
func(e *ANIMATEElementBuilder) BYRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("by")
    return e
}


// Defines the pacing of the animation. 
func(e *ANIMATEElementBuilder) CALCMODE(c AnimateCalcModeChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("calcMode", string(c))
    return e
}

type AnimateCalcModeChoice string
const(
// The animation is not paced 
// Each iteration of the animation is displayed as fast as possible. 
    AnimateCalcMode_discrete AnimateCalcModeChoice = "discrete"
// The animation is paced such that it takes the same amount of time to go from 
// the start value to the end value throughout the animation. 
    AnimateCalcMode_linear AnimateCalcModeChoice = "linear"
// The animation is paced according to a cubic function. 
    AnimateCalcMode_paced AnimateCalcModeChoice = "paced"
// The animation is paced according to a cubic function, but with easing at both 
// the start and end. 
    AnimateCalcMode_spline AnimateCalcModeChoice = "spline"
)

// Remove the attribute calcMode from the element.
func(e *ANIMATEElementBuilder) CALCMODERemove(c AnimateCalcModeChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("calcMode")
    return e
}


// Defines the duration of the animation. 
func(e *ANIMATEElementBuilder) DUR(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("dur", s)
    return e
}

// Remove the attribute dur from the element.
func(e *ANIMATEElementBuilder) DURRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("dur")
    return e
}


// Defines when the animation should end. 
func(e *ANIMATEElementBuilder) END(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("end", s)
    return e
}

// Remove the attribute end from the element.
func(e *ANIMATEElementBuilder) ENDRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("end")
    return e
}


// Defines when the animation should take place in terms of time fractions. 
func(e *ANIMATEElementBuilder) KEYTIMES(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("keyTimes", s)
    return e
}

// Remove the attribute keyTimes from the element.
func(e *ANIMATEElementBuilder) KEYTIMESRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("keyTimes")
    return e
}


// The name of the attribute to animate. 
func(e *ANIMATEElementBuilder) ATTRIBUTENAME(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("attributeName", s)
    return e
}

// Remove the attribute attributeName from the element.
func(e *ANIMATEElementBuilder) ATTRIBUTENAMERemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("attributeName")
    return e
}


// Defines the values for a cubic Bézier function that controls interval pacing. 
func(e *ANIMATEElementBuilder) KEYSPLINES(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("keySplines", s)
    return e
}

// Remove the attribute keySplines from the element.
func(e *ANIMATEElementBuilder) KEYSPLINESRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("keySplines")
    return e
}


// Defines the fill behavior for the animation. 
func(e *ANIMATEElementBuilder) FILL(c AnimateFillChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("fill", string(c))
    return e
}

type AnimateFillChoice string
const(
// The animation will hold the attribute value when the animation ends. 
    AnimateFill_freeze AnimateFillChoice = "freeze"
// The animation will remove the attribute value when the animation ends. 
    AnimateFill_remove AnimateFillChoice = "remove"
)

// Remove the attribute fill from the element.
func(e *ANIMATEElementBuilder) FILLRemove(c AnimateFillChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("fill")
    return e
}


// Defines the maximum value allowed for the attribute. 
func(e *ANIMATEElementBuilder) MAX(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("max", s)
    return e
}

// Remove the attribute max from the element.
func(e *ANIMATEElementBuilder) MAXRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("max")
    return e
}


// Defines the minimum value allowed for the attribute. 
func(e *ANIMATEElementBuilder) MIN(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("min", s)
    return e
}

// Remove the attribute min from the element.
func(e *ANIMATEElementBuilder) MINRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("min")
    return e
}


// Defines the number of times the animation should repeat. 
func(e *ANIMATEElementBuilder) REPEATCOUNT(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("repeatCount", s)
    return e
}

// Remove the attribute repeatCount from the element.
func(e *ANIMATEElementBuilder) REPEATCOUNTRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("repeatCount")
    return e
}


// Controls whether or not the animation is additive. 
func(e *ANIMATEElementBuilder) ADDITIVE(c AnimateAdditiveChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("additive", string(c))
    return e
}

type AnimateAdditiveChoice string
const(
// The animation is not additive 
// The animation replaces the underlying value. 
    AnimateAdditive_replace AnimateAdditiveChoice = "replace"
// The animation is additive 
// The animation adds to the underlying value. 
    AnimateAdditive_sum AnimateAdditiveChoice = "sum"
)

// Remove the attribute additive from the element.
func(e *ANIMATEElementBuilder) ADDITIVERemove(c AnimateAdditiveChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("additive")
    return e
}


// Defines if an animation should restart after it completes. 
func(e *ANIMATEElementBuilder) RESTART(c AnimateRestartChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("restart", string(c))
    return e
}

type AnimateRestartChoice string
const(
// The animation will restart indefinitely. 
    AnimateRestart_always AnimateRestartChoice = "always"
// The animation will not restart after it completes. 
    AnimateRestart_never AnimateRestartChoice = "never"
// The animation will restart after it completes if the animation is not currently 
// active. 
    AnimateRestart_whenNotActive AnimateRestartChoice = "whenNotActive"
)

// Remove the attribute restart from the element.
func(e *ANIMATEElementBuilder) RESTARTRemove(c AnimateRestartChoice) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("restart")
    return e
}


// Defines the ending value of the attribute. 
func(e *ANIMATEElementBuilder) TO(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("to", s)
    return e
}

// Remove the attribute to from the element.
func(e *ANIMATEElementBuilder) TORemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("to")
    return e
}


// Defines a list of discrete values to interpolate. 
func(e *ANIMATEElementBuilder) VALUES(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("values", s)
    return e
}

// Remove the attribute values from the element.
func(e *ANIMATEElementBuilder) VALUESRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("values")
    return e
}


// Specifies one or more classnames for an element (refers to a class in a style 
// sheet) 
func(e *ANIMATEElementBuilder) CLASS(s ...string) *ANIMATEElementBuilder{
    if e.DelimitedStrings == nil {
        e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        ds = NewDelimitedBuilder[string](" ")
        e.DelimitedStrings.Set("class", ds)
    }
    ds.Add(s...)
    return e
}

// Remove the attribute class from the element.
func(e *ANIMATEElementBuilder) CLASSRemove(s ...string) *ANIMATEElementBuilder{
    if e.DelimitedStrings == nil {
        return e
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        return e
    }
    ds.Remove(s ...)
    return e
}



// Specifies a unique id for an element 
func(e *ANIMATEElementBuilder) ID(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("id", s)
    return e
}

// Remove the attribute id from the element.
func(e *ANIMATEElementBuilder) IDRemove(s string) *ANIMATEElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("id")
    return e
}


// Specifies an inline CSS style for an element 
func (e *ANIMATEElementBuilder) STYLE(k string, v string) *ANIMATEElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    kv.Add(k, v)
    return e
}

// Add the attributes in the map to the element.
func (e *ANIMATEElementBuilder) STYLEMap(m map[string]string) *ANIMATEElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    for k, v := range m {
        kv.Add(k, v)
    }
    return e
}

// Add pairs of attributes to the element.
func (e *ANIMATEElementBuilder) STYLEPairs(pairs ...string) *ANIMATEElementBuilder {
    if len(pairs) % 2 != 0 {
        panic("Must have an even number of pairs")
    }
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }

    for i := 0; i < len(pairs); i += 2 {
        kv.Add(pairs[i], pairs[i+1])
    }

    return e
}


// Remove the attribute style from the element.
func (e *ANIMATEElementBuilder) STYLERemove(keys ...string) *ANIMATEElementBuilder {
    if e.KVStrings == nil {
        return e
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        return e
    }
    for _, k := range keys {
        kv.Remove(k)
    }
    return e
}



