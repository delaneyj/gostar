// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg is generated from configuration file.
// Description:
// Scalable Vector Graphics (SVG) is an XML-based markup language for describing 
// two-dimensional based vector graphics 
// As such, it's a text-based, open Web standard for describing images that can be 
// rendered cleanly at any size and are designed specifically to work well with 
// other web standards including CSS, DOM, JavaScript, and SMIL 
// SVG is, essentially, to graphics what HTML is to text 
// SVG images and their related behaviors are defined in XML text files, which 
// means they can be searched, indexed, scripted, and compressed 
// Additionally, this means they can be created and edited with any text editor or 
// with drawing software 
// Compared to classic bitmapped image formats such as JPEG or PNG, SVG-format 
// vector images can be rendered at any size without loss of quality and can be 
// easily localized by updating the text within them, without the need of a 
// graphical editor to do so 
// With proper libraries, SVG files can even be localized on-the-fly. 
package svg

import(
    "fmt"
    "github.com/igrmk/treemap/v2"
)

// The <textPath> SVG element defines a set of glyphs that exactly fit along a 
// curve. 
type TEXTPATHElementBuilder struct {
    *ElementBuilder
}

// Create a new TEXTPATHElementBuilder element.
// This will create a new element with the tag
// "textPath" during rendering.
func TEXTPATH(children ...ElementRenderer) *TEXTPATHElementBuilder {
    return &TEXTPATHElementBuilder{
        ElementBuilder: &ElementBuilder{
            Tag: []byte("textPath"),
            IsSelfClosing: false,
            Descendants: children,
		},
    }
}

func (e *TEXTPATHElementBuilder) Children(children ...ElementRenderer) *TEXTPATHElementBuilder {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *TEXTPATHElementBuilder) IfChildren(condition bool, children ...ElementRenderer) *TEXTPATHElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *TEXTPATHElementBuilder) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *TEXTPATHElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *TEXTPATHElementBuilder) Text(text string) *TEXTPATHElementBuilder {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *TEXTPATHElementBuilder) TextF(format string, args ...any) *TEXTPATHElementBuilder {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *TEXTPATHElementBuilder) Escaped(text string) *TEXTPATHElementBuilder {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *TEXTPATHElementBuilder) EscapedF(format string, args ...any) *TEXTPATHElementBuilder {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *TEXTPATHElementBuilder) CustomData(key, value string) *TEXTPATHElementBuilder {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *TEXTPATHElementBuilder) CustomDataRemove(key string) *TEXTPATHElementBuilder {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}


// A URI reference to the path to render along. 
func(e *TEXTPATHElementBuilder) HREF(s string) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("href", s)
    return e
}

// Remove the attribute href from the element.
func(e *TEXTPATHElementBuilder) HREFRemove(s string) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("href")
    return e
}


// Indicates an offset from the start of the path, where the first character is 
// rendered. 
func(e *TEXTPATHElementBuilder) STARTOFFSET(s string) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("startOffset", s)
    return e
}

// Remove the attribute startOffset from the element.
func(e *TEXTPATHElementBuilder) STARTOFFSETRemove(s string) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("startOffset")
    return e
}


// Indicates the method by which text should be rendered along the path. 
func(e *TEXTPATHElementBuilder) METHOD(c TextPathMethodChoice) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("method", string(c))
    return e
}

type TextPathMethodChoice string
const(
// Indicates the method by which text should be rendered along the path. 
    TextPathMethod_align TextPathMethodChoice = "align"
// Indicates the method by which text should be rendered along the path. 
    TextPathMethod_stretch TextPathMethodChoice = "stretch"
)

// Remove the attribute method from the element.
func(e *TEXTPATHElementBuilder) METHODRemove(c TextPathMethodChoice) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("method")
    return e
}


// Indicates the spacing behavior between characters. 
func(e *TEXTPATHElementBuilder) SPACING(c TextPathSpacingChoice) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("spacing", string(c))
    return e
}

type TextPathSpacingChoice string
const(
// Indicates the spacing behavior between characters. 
    TextPathSpacing_auto TextPathSpacingChoice = "auto"
// Indicates the spacing behavior between characters. 
    TextPathSpacing_exact TextPathSpacingChoice = "exact"
)

// Remove the attribute spacing from the element.
func(e *TEXTPATHElementBuilder) SPACINGRemove(c TextPathSpacingChoice) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("spacing")
    return e
}


// Specifies one or more classnames for an element (refers to a class in a style 
// sheet) 
func(e *TEXTPATHElementBuilder) CLASS(s ...string) *TEXTPATHElementBuilder{
    if e.DelimitedStrings == nil {
        e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        ds = NewDelimitedBuilder[string](" ")
        e.DelimitedStrings.Set("class", ds)
    }
    ds.Add(s...)
    return e
}

// Remove the attribute class from the element.
func(e *TEXTPATHElementBuilder) CLASSRemove(s ...string) *TEXTPATHElementBuilder{
    if e.DelimitedStrings == nil {
        return e
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        return e
    }
    ds.Remove(s ...)
    return e
}



// Specifies a unique id for an element 
func(e *TEXTPATHElementBuilder) ID(s string) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("id", s)
    return e
}

// Remove the attribute id from the element.
func(e *TEXTPATHElementBuilder) IDRemove(s string) *TEXTPATHElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("id")
    return e
}


// Specifies an inline CSS style for an element 
func (e *TEXTPATHElementBuilder) STYLE(k string, v string) *TEXTPATHElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    kv.Add(k, v)
    return e
}

// Add the attributes in the map to the element.
func (e *TEXTPATHElementBuilder) STYLEMap(m map[string]string) *TEXTPATHElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    for k, v := range m {
        kv.Add(k, v)
    }
    return e
}

// Add pairs of attributes to the element.
func (e *TEXTPATHElementBuilder) STYLEPairs(pairs ...string) *TEXTPATHElementBuilder {
    if len(pairs) % 2 != 0 {
        panic("Must have an even number of pairs")
    }
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }

    for i := 0; i < len(pairs); i += 2 {
        kv.Add(pairs[i], pairs[i+1])
    }

    return e
}


// Remove the attribute style from the element.
func (e *TEXTPATHElementBuilder) STYLERemove(keys ...string) *TEXTPATHElementBuilder {
    if e.KVStrings == nil {
        return e
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        return e
    }
    for _, k := range keys {
        kv.Remove(k)
    }
    return e
}



