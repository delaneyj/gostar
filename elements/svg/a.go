// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg is generated from configuration file.
// Description:
// Scalable Vector Graphics (SVG) is an XML-based markup language for describing 
// two-dimensional based vector graphics 
// As such, it's a text-based, open Web standard for describing images that can be 
// rendered cleanly at any size and are designed specifically to work well with 
// other web standards including CSS, DOM, JavaScript, and SMIL 
// SVG is, essentially, to graphics what HTML is to text 
// SVG images and their related behaviors are defined in XML text files, which 
// means they can be searched, indexed, scripted, and compressed 
// Additionally, this means they can be created and edited with any text editor or 
// with drawing software 
// Compared to classic bitmapped image formats such as JPEG or PNG, SVG-format 
// vector images can be rendered at any size without loss of quality and can be 
// easily localized by updating the text within them, without the need of a 
// graphical editor to do so 
// With proper libraries, SVG files can even be localized on-the-fly. 
package svg

import(
    "fmt"
    "github.com/igrmk/treemap/v2"
)

// The <a> SVG element creates a hyperlink to other web pages, files, locations in 
// the same page, email addresses, or any other URL 
// It is very similar to HTML's <a> element 
// SVG's <a> element is a container, which means you can create a link around text 
// (like in HTML) but also around any shape. 
type AElementBuilder struct {
    *ElementBuilder
}

// Create a new AElementBuilder element.
// This will create a new element with the tag
// "a" during rendering.
func A(children ...ElementRenderer) *AElementBuilder {
    return &AElementBuilder{
        ElementBuilder: &ElementBuilder{
            Tag: []byte("a"),
            IsSelfClosing: false,
            Descendants: children,
		},
    }
}

func (e *AElementBuilder) Children(children ...ElementRenderer) *AElementBuilder {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *AElementBuilder) IfChildren(condition bool, children ...ElementRenderer) *AElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *AElementBuilder) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *AElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *AElementBuilder) Text(text string) *AElementBuilder {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *AElementBuilder) TextF(format string, args ...any) *AElementBuilder {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *AElementBuilder) Escaped(text string) *AElementBuilder {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *AElementBuilder) EscapedF(format string, args ...any) *AElementBuilder {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *AElementBuilder) CustomData(key, value string) *AElementBuilder {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *AElementBuilder) CustomDataRemove(key string) *AElementBuilder {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}


// Indicates that the hyperlink is to be used for downloading a resource 
// When used together with the download attribute, the value of the attribute is 
// used as the file name of the downloaded file 
// There are no restrictions on allowed values, though / and \ will be converted 
// to underscores and leading spaces in filenames will be removed. 
func(e *AElementBuilder) DOWNLOAD(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("download", s)
    return e
}

// Remove the attribute download from the element.
func(e *AElementBuilder) DOWNLOADRemove(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("download")
    return e
}


// The URL of a linked resource. 
func(e *AElementBuilder) HREF(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("href", s)
    return e
}

// Remove the attribute href from the element.
func(e *AElementBuilder) HREFRemove(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("href")
    return e
}


// Specifies the language of the linked resource. 
func(e *AElementBuilder) HREFLANG(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("hreflang", s)
    return e
}

// Remove the attribute hreflang from the element.
func(e *AElementBuilder) HREFLANGRemove(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("hreflang")
    return e
}


// A space-separated list of URLs 
// When the link is followed, the browser should send POST requests with the body 
// PING to the URLs 
// Typically for tracking. 
func(e *AElementBuilder) PING(s ...string) *AElementBuilder{
    if e.DelimitedStrings == nil {
        e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
    }
    ds, ok := e.DelimitedStrings.Get("ping")
    if !ok {
        ds = NewDelimitedBuilder[string](" ")
        e.DelimitedStrings.Set("ping", ds)
    }
    ds.Add(s...)
    return e
}

// Remove the attribute ping from the element.
func(e *AElementBuilder) PINGRemove(s ...string) *AElementBuilder{
    if e.DelimitedStrings == nil {
        return e
    }
    ds, ok := e.DelimitedStrings.Get("ping")
    if !ok {
        return e
    }
    ds.Remove(s ...)
    return e
}



// Referrer policy to use when fetching the resource. 
func(e *AElementBuilder) REFERRERPOLICY(c AReferrerpolicyChoice) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("referrerpolicy", string(c))
    return e
}

type AReferrerpolicyChoice string
const(
// The Referer header will not be sent. 
    AReferrerpolicy_no_referrer AReferrerpolicyChoice = "no-referrer"
// The Referer header will not be sent to origins without TLS (HTTPS). 
    AReferrerpolicy_no_referrer_when_downgrade AReferrerpolicyChoice = "no-referrer-when-downgrade"
// The Referer header will contain the origin of the request. 
    AReferrerpolicy_origin AReferrerpolicyChoice = "origin"
// The Referer header will contain the origin of the request, unless it is a 
// cross-origin request, in which case it will be omitted entirely. 
    AReferrerpolicy_origin_when_cross_origin AReferrerpolicyChoice = "origin-when-cross-origin"
// The Referer header will contain the origin of the request, unless it is a 
// cross-origin request, in which case it will be omitted entirely. 
    AReferrerpolicy_same_origin AReferrerpolicyChoice = "same-origin"
// The Referer header will contain the origin of the request, unless it is a 
// cross-origin request, in which case it will be omitted entirely. 
    AReferrerpolicy_strict_origin AReferrerpolicyChoice = "strict-origin"
// The Referer header will contain the origin of the request, unless it is a 
// cross-origin request, in which case it will be omitted entirely. 
    AReferrerpolicy_strict_origin_when_cross_origin AReferrerpolicyChoice = "strict-origin-when-cross-origin"
// The Referer header will contain the origin of the request, unless it is a 
// cross-origin request, in which case it will be omitted entirely. 
    AReferrerpolicy_unsafe_url AReferrerpolicyChoice = "unsafe-url"
)

// Remove the attribute referrerpolicy from the element.
func(e *AElementBuilder) REFERRERPOLICYRemove(c AReferrerpolicyChoice) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("referrerpolicy")
    return e
}


// Specifies the relationship of the target object to the link object. 
func(e *AElementBuilder) REL(c ARelChoice) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("rel", string(c))
    return e
}

type ARelChoice string
const(
// Links to an alternate version of the document (i.e 
// print page, translated or mirror). 
    ARel_alternate ARelChoice = "alternate"
// Links to the author of the document. 
    ARel_author ARelChoice = "author"
// Permanent URL used for bookmarking. 
    ARel_bookmark ARelChoice = "bookmark"
// Helps prevent duplicate content issues. 
    ARel_canonical ARelChoice = "canonical"
// Specifies that the browser should preemptively perform DNS resolution for the 
// target resource's origin. 
    ARel_dns_prefetch ARelChoice = "dns-prefetch"
// Links to an external resource (an external stylesheet). 
    ARel_external ARelChoice = "external"
// Links to a help document. 
    ARel_help ARelChoice = "help"
// Imports an icon to represent the document. 
    ARel_icon ARelChoice = "icon"
// Links to a license associated with the document. 
    ARel_license ARelChoice = "license"
// Specifies the location of a manifest file or an entry point for a web 
// application. 
    ARel_manifest ARelChoice = "manifest"
// Links to a resource that is the primary topic of the document. 
    ARel_me ARelChoice = "me"
// Specifies that the target resource should be preemptively fetched and cached by 
// the browser for later use. 
    ARel_modulepreload ARelChoice = "modulepreload"
// The next document in a selection. 
    ARel_next ARelChoice = "next"
// Links to an unendorsed document, like a paid link 
// ("nofollow" is used by Google, to specify that the Google search spider should 
// not follow that link.) 
    ARel_nofollow ARelChoice = "nofollow"
// Specifies that the browser should not open the linked document in a new tab or 
// window. 
    ARel_noopener ARelChoice = "noopener"
// Specifies that the browser should not send a HTTP referer header if the user 
// follows the hyperlink. 
    ARel_noreferrer ARelChoice = "noreferrer"
// Specifies that the target URL should be opened in a top-level browsing context 
// (that is, in the current tab or window). 
    ARel_opener ARelChoice = "opener"
// Links to the Pingback server of the current document. 
    ARel_pingback ARelChoice = "pingback"
// Specifies that the target resource should be loaded immediately. 
    ARel_preload ARelChoice = "preload"
// The previous document in a selection. 
    ARel_prev ARelChoice = "prev"
// Links to a privacy policy document associated with the current document. 
    ARel_privacy_policy ARelChoice = "privacy-policy"
// Links to a search tool for the document. 
    ARel_search ARelChoice = "search"
// Links to an external style sheet. 
    ARel_stylesheet ARelChoice = "stylesheet"
// A tag (keyword) for the current document. 
    ARel_tag ARelChoice = "tag"
// Links to the terms of service document for the current document. 
    ARel_terms_of_service ARelChoice = "terms-of-service"
)

// Remove the attribute rel from the element.
func(e *AElementBuilder) RELRemove(c ARelChoice) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("rel")
    return e
}


// Specifies where to display the linked resource. 
func(e *AElementBuilder) TARGET(c ATargetChoice) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("target", string(c))
    return e
}

type ATargetChoice string
const(
// Default 
// Opens the document in the same frame as it was clicked. 
    ATarget__self ATargetChoice = "_self"
// Opens the document in a new window or tab. 
    ATarget__blank ATargetChoice = "_blank"
// Opens the document in the parent frame. 
    ATarget__parent ATargetChoice = "_parent"
// Opens the document in the full body of the window. 
    ATarget__top ATargetChoice = "_top"
// Opens the document in a named frame. 
    ATarget_framename ATargetChoice = "framename"
)

// Remove the attribute target from the element.
func(e *AElementBuilder) TARGETRemove(c ATargetChoice) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("target")
    return e
}


// Specifies the MIME type of the linked resource. 
func(e *AElementBuilder) TYPE(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("type", s)
    return e
}

// Remove the attribute type from the element.
func(e *AElementBuilder) TYPERemove(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("type")
    return e
}


// Specifies a unique id for an element 
func(e *AElementBuilder) ID(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("id", s)
    return e
}

// Remove the attribute id from the element.
func(e *AElementBuilder) IDRemove(s string) *AElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("id")
    return e
}


// Specifies one or more classnames for an element (refers to a class in a style 
// sheet) 
func(e *AElementBuilder) CLASS(s ...string) *AElementBuilder{
    if e.DelimitedStrings == nil {
        e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        ds = NewDelimitedBuilder[string](" ")
        e.DelimitedStrings.Set("class", ds)
    }
    ds.Add(s...)
    return e
}

// Remove the attribute class from the element.
func(e *AElementBuilder) CLASSRemove(s ...string) *AElementBuilder{
    if e.DelimitedStrings == nil {
        return e
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        return e
    }
    ds.Remove(s ...)
    return e
}



// Specifies an inline CSS style for an element 
func (e *AElementBuilder) STYLE(k string, v string) *AElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    kv.Add(k, v)
    return e
}

// Add the attributes in the map to the element.
func (e *AElementBuilder) STYLEMap(m map[string]string) *AElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    for k, v := range m {
        kv.Add(k, v)
    }
    return e
}

// Add pairs of attributes to the element.
func (e *AElementBuilder) STYLEPairs(pairs ...string) *AElementBuilder {
    if len(pairs) % 2 != 0 {
        panic("Must have an even number of pairs")
    }
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }

    for i := 0; i < len(pairs); i += 2 {
        kv.Add(pairs[i], pairs[i+1])
    }

    return e
}


// Remove the attribute style from the element.
func (e *AElementBuilder) STYLERemove(keys ...string) *AElementBuilder {
    if e.KVStrings == nil {
        return e
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        return e
    }
    for _, k := range keys {
        kv.Remove(k)
    }
    return e
}



