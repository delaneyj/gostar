// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg is generated from configuration file.
// Description:
// Scalable Vector Graphics (SVG) is an XML-based markup language for describing 
// two-dimensional based vector graphics 
// As such, it's a text-based, open Web standard for describing images that can be 
// rendered cleanly at any size and are designed specifically to work well with 
// other web standards including CSS, DOM, JavaScript, and SMIL 
// SVG is, essentially, to graphics what HTML is to text 
// SVG images and their related behaviors are defined in XML text files, which 
// means they can be searched, indexed, scripted, and compressed 
// Additionally, this means they can be created and edited with any text editor or 
// with drawing software 
// Compared to classic bitmapped image formats such as JPEG or PNG, SVG-format 
// vector images can be rendered at any size without loss of quality and can be 
// easily localized by updating the text within them, without the need of a 
// graphical editor to do so 
// With proper libraries, SVG files can even be localized on-the-fly. 
package svg

import(
    "fmt"
    "github.com/igrmk/treemap/v2"
)

// The <feConvolveMatrix> SVG filter primitive applies a matrix convolution filter 
// effect. 
type FECONVOLVEMATRIXElementBuilder struct {
    *ElementBuilder
}

// Create a new FECONVOLVEMATRIXElementBuilder element.
// This will create a new element with the tag
// "feConvolveMatrix" during rendering.
func FECONVOLVEMATRIX(children ...ElementRenderer) *FECONVOLVEMATRIXElementBuilder {
    return &FECONVOLVEMATRIXElementBuilder{
        ElementBuilder: &ElementBuilder{
            Tag: []byte("feConvolveMatrix"),
            IsSelfClosing: false,
            Descendants: children,
		},
    }
}

func (e *FECONVOLVEMATRIXElementBuilder) Children(children ...ElementRenderer) *FECONVOLVEMATRIXElementBuilder {
    e.Descendants = append(e.Descendants, children...)
    return e
}

func(e *FECONVOLVEMATRIXElementBuilder) IfChildren(condition bool, children ...ElementRenderer) *FECONVOLVEMATRIXElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, children...)
    }
    return e
}

func(e *FECONVOLVEMATRIXElementBuilder) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *FECONVOLVEMATRIXElementBuilder {
    if condition {
        e.Descendants = append(e.Descendants, trueChildren)
    } else {
        e.Descendants = append(e.Descendants, falseChildren)
    }
    return e
}

func (e *FECONVOLVEMATRIXElementBuilder) Text(text string) *FECONVOLVEMATRIXElementBuilder {
    e.Descendants = append(e.Descendants, Text(text))
    return e
}

func (e *FECONVOLVEMATRIXElementBuilder) TextF(format string, args ...any) *FECONVOLVEMATRIXElementBuilder {
    return e.Text(fmt.Sprintf(format, args...))
}

func (e *FECONVOLVEMATRIXElementBuilder) Escaped(text string) *FECONVOLVEMATRIXElementBuilder {
    e.Descendants = append(e.Descendants, Escaped(text))
    return e
}

func (e *FECONVOLVEMATRIXElementBuilder) EscapedF(format string, args ...any) *FECONVOLVEMATRIXElementBuilder {
    return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *FECONVOLVEMATRIXElementBuilder) CustomData(key, value string) *FECONVOLVEMATRIXElementBuilder {
    if e.CustomDataAttributes == nil {
        e.CustomDataAttributes = treemap.New[string,string]()
    }
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *FECONVOLVEMATRIXElementBuilder) CustomDataRemove(key string) *FECONVOLVEMATRIXElementBuilder {
	if e.CustomDataAttributes == nil {
		return e
	}
    e.CustomDataAttributes.Del(key)
	return e
}


// The targetY attribute determines the positioning in Y of the convolution matrix 
// relative to a given target pixel in the input image. 
func(e *FECONVOLVEMATRIXElementBuilder) TARGETY(f float64) *FECONVOLVEMATRIXElementBuilder{
    if e.FloatAttributes == nil {
        e.FloatAttributes = treemap.New[string,float64]()
    }
    e.FloatAttributes.Set("targetY", f)
    return e
}



// The number of cells in each dimension for 'kernelMatrix' 
func(e *FECONVOLVEMATRIXElementBuilder) ORDER(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("order", s)
    return e
}

// Remove the attribute order from the element.
func(e *FECONVOLVEMATRIXElementBuilder) ORDERRemove(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("order")
    return e
}


// A list of numbers that make up the kernel matrix for the convolution. 
func(e *FECONVOLVEMATRIXElementBuilder) KERNELMATRIX(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("kernelMatrix", s)
    return e
}

// Remove the attribute kernelMatrix from the element.
func(e *FECONVOLVEMATRIXElementBuilder) KERNELMATRIXRemove(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("kernelMatrix")
    return e
}


// The divisor attribute specifies the value by which to divide the result of 
// applying the convolution operator. 
func(e *FECONVOLVEMATRIXElementBuilder) DIVISOR(f float64) *FECONVOLVEMATRIXElementBuilder{
    if e.FloatAttributes == nil {
        e.FloatAttributes = treemap.New[string,float64]()
    }
    e.FloatAttributes.Set("divisor", f)
    return e
}



// The bias attribute shifts the range of the filter 
// After applying the matrix operation, this bias value is added to each 
// component. 
func(e *FECONVOLVEMATRIXElementBuilder) BIAS(f float64) *FECONVOLVEMATRIXElementBuilder{
    if e.FloatAttributes == nil {
        e.FloatAttributes = treemap.New[string,float64]()
    }
    e.FloatAttributes.Set("bias", f)
    return e
}



// The targetX attribute determines the positioning in X of the convolution matrix 
// relative to a given target pixel in the input image. 
func(e *FECONVOLVEMATRIXElementBuilder) TARGETX(f float64) *FECONVOLVEMATRIXElementBuilder{
    if e.FloatAttributes == nil {
        e.FloatAttributes = treemap.New[string,float64]()
    }
    e.FloatAttributes.Set("targetX", f)
    return e
}



// The input for this filter. 
func(e *FECONVOLVEMATRIXElementBuilder) IN(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("in", s)
    return e
}

// Remove the attribute in from the element.
func(e *FECONVOLVEMATRIXElementBuilder) INRemove(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("in")
    return e
}


// The edgeMode attribute determines how to extend the input image as necessary 
// with color values so that the matrix operations can be applied when the kernel 
// is positioned at or near the edge of the input image. 
func(e *FECONVOLVEMATRIXElementBuilder) EDGEMODE(c FeConvolveMatrixEdgeModeChoice) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("edgeMode", string(c))
    return e
}

type FeConvolveMatrixEdgeModeChoice string
const(
// The input image is extended along each of its borders as necessary by 
// duplicating the color values at the given edge of the input image. 
    FeConvolveMatrixEdgeMode_duplicate FeConvolveMatrixEdgeModeChoice = "duplicate"
// The input image is extended by taking the component values from the opposite 
// edge of the image. 
    FeConvolveMatrixEdgeMode_wrap FeConvolveMatrixEdgeModeChoice = "wrap"
// Any values outside the input image are assumed to be transparent black. 
    FeConvolveMatrixEdgeMode_none FeConvolveMatrixEdgeModeChoice = "none"
)

// Remove the attribute edgeMode from the element.
func(e *FECONVOLVEMATRIXElementBuilder) EDGEMODERemove(c FeConvolveMatrixEdgeModeChoice) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("edgeMode")
    return e
}


// The kernelUnitLength attribute defines the intended distance in current filter 
// units (i.e., units as determined by the value of attribute 'primitiveUnits') 
// for dx and dy in the surface normal calculation formulas. 
func(e *FECONVOLVEMATRIXElementBuilder) KERNELUNITLENGTH(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("kernelUnitLength", s)
    return e
}

// Remove the attribute kernelUnitLength from the element.
func(e *FECONVOLVEMATRIXElementBuilder) KERNELUNITLENGTHRemove(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("kernelUnitLength")
    return e
}


// The preserveAlpha attribute indicates how the convolution will handle the alpha 
// channel of the input image. 
func(e *FECONVOLVEMATRIXElementBuilder) PRESERVEALPHA() *FECONVOLVEMATRIXElementBuilder{
    e.PRESERVEALPHASet(true)
    return e
}

// Set the attribute preserveAlpha to the value b explicitly.
func(e *FECONVOLVEMATRIXElementBuilder) PRESERVEALPHASet(b bool) *FECONVOLVEMATRIXElementBuilder{
    if e.BoolAttributes == nil {
        e.BoolAttributes = treemap.New[string,bool]()
    }
    e.BoolAttributes.Set("preserveAlpha", b)
    return e
}

// Remove the attribute preserveAlpha from the element.
func(e *FECONVOLVEMATRIXElementBuilder) PRESERVEALPHARemove(b bool) *FECONVOLVEMATRIXElementBuilder{
    if e.BoolAttributes == nil {
        return e
    }
    e.BoolAttributes.Del("preserveAlpha")
    return e
}



// Specifies one or more classnames for an element (refers to a class in a style 
// sheet) 
func(e *FECONVOLVEMATRIXElementBuilder) CLASS(s ...string) *FECONVOLVEMATRIXElementBuilder{
    if e.DelimitedStrings == nil {
        e.DelimitedStrings = treemap.New[string,*DelimitedBuilder[string]]()
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        ds = NewDelimitedBuilder[string](" ")
        e.DelimitedStrings.Set("class", ds)
    }
    ds.Add(s...)
    return e
}

// Remove the attribute class from the element.
func(e *FECONVOLVEMATRIXElementBuilder) CLASSRemove(s ...string) *FECONVOLVEMATRIXElementBuilder{
    if e.DelimitedStrings == nil {
        return e
    }
    ds, ok := e.DelimitedStrings.Get("class")
    if !ok {
        return e
    }
    ds.Remove(s ...)
    return e
}



// Specifies a unique id for an element 
func(e *FECONVOLVEMATRIXElementBuilder) ID(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        e.StringAttributes = treemap.New[string,string]()
    }
    e.StringAttributes.Set("id", s)
    return e
}

// Remove the attribute id from the element.
func(e *FECONVOLVEMATRIXElementBuilder) IDRemove(s string) *FECONVOLVEMATRIXElementBuilder{
    if e.StringAttributes == nil {
        return e
    }
    e.StringAttributes.Del("id")
    return e
}


// Specifies an inline CSS style for an element 
func (e *FECONVOLVEMATRIXElementBuilder) STYLE(k string, v string) *FECONVOLVEMATRIXElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    kv.Add(k, v)
    return e
}

// Add the attributes in the map to the element.
func (e *FECONVOLVEMATRIXElementBuilder) STYLEMap(m map[string]string) *FECONVOLVEMATRIXElementBuilder {
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }
    for k, v := range m {
        kv.Add(k, v)
    }
    return e
}

// Add pairs of attributes to the element.
func (e *FECONVOLVEMATRIXElementBuilder) STYLEPairs(pairs ...string) *FECONVOLVEMATRIXElementBuilder {
    if len(pairs) % 2 != 0 {
        panic("Must have an even number of pairs")
    }
    if e.KVStrings == nil {
        e.KVStrings = treemap.New[string,*KVBuilder]()
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        kv = NewKVBuilder(":", ";")
        e.KVStrings.Set("style", kv)
    }

    for i := 0; i < len(pairs); i += 2 {
        kv.Add(pairs[i], pairs[i+1])
    }

    return e
}


// Remove the attribute style from the element.
func (e *FECONVOLVEMATRIXElementBuilder) STYLERemove(keys ...string) *FECONVOLVEMATRIXElementBuilder {
    if e.KVStrings == nil {
        return e
    }
    kv, ok := e.KVStrings.Get("style")
    if !ok {
        return e
    }
    for _, k := range keys {
        kv.Remove(k)
    }
    return e
}



