// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package Shoelace Textarea is generated from configuration file.
// Description:
package elements

import (
	"fmt"
	"time"

	"github.com/goccy/go-json"
	"github.com/igrmk/treemap/v2"
	"github.com/samber/lo"
)

type SLTEXTAREAElement struct {
	*Element
}

// Create a new SLTEXTAREAElement element.
// This will create a new element with the tag
// "sl-textarea" during rendering.
func SL_TEXTAREA(children ...ElementRenderer) *SLTEXTAREAElement {
	e := NewElement("sl-textarea", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SLTEXTAREAElement{Element: e}
}

func (e *SLTEXTAREAElement) Children(children ...ElementRenderer) *SLTEXTAREAElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SLTEXTAREAElement) IfChildren(condition bool, children ...ElementRenderer) *SLTEXTAREAElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SLTEXTAREAElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SLTEXTAREAElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SLTEXTAREAElement) Attr(name string, value string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set(name, value)
	return e
}

func (e *SLTEXTAREAElement) Attrs(attrs ...string) *SLTEXTAREAElement {
	if len(attrs)%2 != 0 {
		panic("attrs must be a multiple of 2")
	}
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for i := 0; i < len(attrs); i += 2 {
		k := attrs[i]
		v := attrs[i+1]
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *SLTEXTAREAElement) AttrsMap(attrs map[string]string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for k, v := range attrs {
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *SLTEXTAREAElement) Text(text string) *SLTEXTAREAElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SLTEXTAREAElement) TextF(format string, args ...any) *SLTEXTAREAElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SLTEXTAREAElement) IfText(condition bool, text string) *SLTEXTAREAElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(text))
	}
	return e
}

func (e *SLTEXTAREAElement) IfTextF(condition bool, format string, args ...any) *SLTEXTAREAElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
	}
	return e
}

func (e *SLTEXTAREAElement) Escaped(text string) *SLTEXTAREAElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SLTEXTAREAElement) IfEscaped(condition bool, text string) *SLTEXTAREAElement {
	if condition {
		e.Descendants = append(e.Descendants, Escaped(text))
	}
	return e
}

func (e *SLTEXTAREAElement) EscapedF(format string, args ...any) *SLTEXTAREAElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SLTEXTAREAElement) IfEscapedF(condition bool, format string, args ...any) *SLTEXTAREAElement {
	if condition {
		e.Descendants = append(e.Descendants, EscapedF(format, args...))
	}
	return e
}

func (e *SLTEXTAREAElement) CustomData(key, value string) *SLTEXTAREAElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SLTEXTAREAElement) IfCustomData(condition bool, key, value string) *SLTEXTAREAElement {
	if condition {
		e.CustomData(key, value)
	}
	return e
}

func (e *SLTEXTAREAElement) CustomDataF(key, format string, args ...any) *SLTEXTAREAElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *SLTEXTAREAElement) IfCustomDataF(condition bool, key, format string, args ...any) *SLTEXTAREAElement {
	if condition {
		e.CustomData(key, fmt.Sprintf(format, args...))
	}
	return e
}

func (e *SLTEXTAREAElement) CustomDataRemove(key string) *SLTEXTAREAElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

func (e *SLTEXTAREAElement) NAME(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("name", s)
	return e
}

func (e *SLTEXTAREAElement) IfNAME(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.NAME(s)
	}
	return e
}

// Remove the attribute NAME from the element.
func (e *SLTEXTAREAElement) NAMERemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("name")
	return e
}

func (e *SLTEXTAREAElement) VALUE(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("value", s)
	return e
}

func (e *SLTEXTAREAElement) IfVALUE(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.VALUE(s)
	}
	return e
}

// Remove the attribute VALUE from the element.
func (e *SLTEXTAREAElement) VALUERemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("value")
	return e
}

func (e *SLTEXTAREAElement) SIZE(c SLTextareaSizeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("size", string(c))
	return e
}

type SLTextareaSizeChoice string

const (
	// Small
	SLTextareaSize_small SLTextareaSizeChoice = "small"
	// Medium
	SLTextareaSize_medium SLTextareaSizeChoice = "medium"
	// Large
	SLTextareaSize_large SLTextareaSizeChoice = "large"
)

// Remove the attribute SIZE from the element.
func (e *SLTEXTAREAElement) SIZERemove(c SLTextareaSizeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("size")
	return e
}

func (e *SLTEXTAREAElement) IS_FILLED() *SLTEXTAREAElement {
	e.IS_FILLEDSet(true)
	return e
}

func (e *SLTEXTAREAElement) IfIS_FILLED(condition bool) *SLTEXTAREAElement {
	if condition {
		e.IS_FILLEDSet(true)
	}
	return e
}

// Set the attribute IS_FILLED to the value b explicitly.
func (e *SLTEXTAREAElement) IS_FILLEDSet(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("isFilled", b)
	return e
}

func (e *SLTEXTAREAElement) IfSetIS_FILLED(condition bool, b bool) *SLTEXTAREAElement {
	if condition {
		e.IS_FILLEDSet(b)
	}
	return e
}

// Remove the attribute IS_FILLED from the element.
func (e *SLTEXTAREAElement) IS_FILLEDRemove(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("isFilled")
	return e
}

func (e *SLTEXTAREAElement) LABEL(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("label", s)
	return e
}

func (e *SLTEXTAREAElement) IfLABEL(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.LABEL(s)
	}
	return e
}

// Remove the attribute LABEL from the element.
func (e *SLTEXTAREAElement) LABELRemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("label")
	return e
}

func (e *SLTEXTAREAElement) HELP_TEXT(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("help-text", s)
	return e
}

func (e *SLTEXTAREAElement) IfHELP_TEXT(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.HELP_TEXT(s)
	}
	return e
}

// Remove the attribute HELP_TEXT from the element.
func (e *SLTEXTAREAElement) HELP_TEXTRemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("help-text")
	return e
}

func (e *SLTEXTAREAElement) PLACEHOLDER(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("placeholder", s)
	return e
}

func (e *SLTEXTAREAElement) IfPLACEHOLDER(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.PLACEHOLDER(s)
	}
	return e
}

// Remove the attribute PLACEHOLDER from the element.
func (e *SLTEXTAREAElement) PLACEHOLDERRemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("placeholder")
	return e
}

func (e *SLTEXTAREAElement) ROWS(i int) *SLTEXTAREAElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("rows", i)
	return e
}

func (e *SLTEXTAREAElement) IfROWS(condition bool, i int) *SLTEXTAREAElement {
	if condition {
		e.ROWS(i)
	}
	return e
}

// Remove the attribute ROWS from the element.
func (e *SLTEXTAREAElement) ROWSRemove(i int) *SLTEXTAREAElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("rows")
	return e
}

func (e *SLTEXTAREAElement) RESIZE(c SLTextareaResizeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("resize", string(c))
	return e
}

type SLTextareaResizeChoice string

const (
	// Unset
	SLTextareaResize_empty SLTextareaResizeChoice = ""
	// None
	SLTextareaResize_none SLTextareaResizeChoice = "none"
	// Vertical
	SLTextareaResize_vertical SLTextareaResizeChoice = "vertical"
	// Auto
	SLTextareaResize_auto SLTextareaResizeChoice = "auto"
)

// Remove the attribute RESIZE from the element.
func (e *SLTEXTAREAElement) RESIZERemove(c SLTextareaResizeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("resize")
	return e
}

func (e *SLTEXTAREAElement) DISABLED() *SLTEXTAREAElement {
	e.DISABLEDSet(true)
	return e
}

func (e *SLTEXTAREAElement) IfDISABLED(condition bool) *SLTEXTAREAElement {
	if condition {
		e.DISABLEDSet(true)
	}
	return e
}

// Set the attribute DISABLED to the value b explicitly.
func (e *SLTEXTAREAElement) DISABLEDSet(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("disabled", b)
	return e
}

func (e *SLTEXTAREAElement) IfSetDISABLED(condition bool, b bool) *SLTEXTAREAElement {
	if condition {
		e.DISABLEDSet(b)
	}
	return e
}

// Remove the attribute DISABLED from the element.
func (e *SLTEXTAREAElement) DISABLEDRemove(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("disabled")
	return e
}

func (e *SLTEXTAREAElement) READONLY() *SLTEXTAREAElement {
	e.READONLYSet(true)
	return e
}

func (e *SLTEXTAREAElement) IfREADONLY(condition bool) *SLTEXTAREAElement {
	if condition {
		e.READONLYSet(true)
	}
	return e
}

// Set the attribute READONLY to the value b explicitly.
func (e *SLTEXTAREAElement) READONLYSet(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("readonly", b)
	return e
}

func (e *SLTEXTAREAElement) IfSetREADONLY(condition bool, b bool) *SLTEXTAREAElement {
	if condition {
		e.READONLYSet(b)
	}
	return e
}

// Remove the attribute READONLY from the element.
func (e *SLTEXTAREAElement) READONLYRemove(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("readonly")
	return e
}

func (e *SLTEXTAREAElement) REQUIRED() *SLTEXTAREAElement {
	e.REQUIREDSet(true)
	return e
}

func (e *SLTEXTAREAElement) IfREQUIRED(condition bool) *SLTEXTAREAElement {
	if condition {
		e.REQUIREDSet(true)
	}
	return e
}

// Set the attribute REQUIRED to the value b explicitly.
func (e *SLTEXTAREAElement) REQUIREDSet(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("required", b)
	return e
}

func (e *SLTEXTAREAElement) IfSetREQUIRED(condition bool, b bool) *SLTEXTAREAElement {
	if condition {
		e.REQUIREDSet(b)
	}
	return e
}

// Remove the attribute REQUIRED from the element.
func (e *SLTEXTAREAElement) REQUIREDRemove(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("required")
	return e
}

func (e *SLTEXTAREAElement) MINLENGTH(i int) *SLTEXTAREAElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("minlength", i)
	return e
}

func (e *SLTEXTAREAElement) IfMINLENGTH(condition bool, i int) *SLTEXTAREAElement {
	if condition {
		e.MINLENGTH(i)
	}
	return e
}

// Remove the attribute MINLENGTH from the element.
func (e *SLTEXTAREAElement) MINLENGTHRemove(i int) *SLTEXTAREAElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("minlength")
	return e
}

func (e *SLTEXTAREAElement) MAXLENGTH(i int) *SLTEXTAREAElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("maxlength", i)
	return e
}

func (e *SLTEXTAREAElement) IfMAXLENGTH(condition bool, i int) *SLTEXTAREAElement {
	if condition {
		e.MAXLENGTH(i)
	}
	return e
}

// Remove the attribute MAXLENGTH from the element.
func (e *SLTEXTAREAElement) MAXLENGTHRemove(i int) *SLTEXTAREAElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("maxlength")
	return e
}

func (e *SLTEXTAREAElement) AUTOCAPITALIZE(c SLTextareaAutocapitalizeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("autocapitalize", string(c))
	return e
}

type SLTextareaAutocapitalizeChoice string

const (
	// Off
	SLTextareaAutocapitalize_off SLTextareaAutocapitalizeChoice = "off"
	// None
	SLTextareaAutocapitalize_none SLTextareaAutocapitalizeChoice = "none"
	// On
	SLTextareaAutocapitalize_on SLTextareaAutocapitalizeChoice = "on"
	// Sentences
	SLTextareaAutocapitalize_sentences SLTextareaAutocapitalizeChoice = "sentences"
	// Words
	SLTextareaAutocapitalize_words SLTextareaAutocapitalizeChoice = "words"
	// Characters
	SLTextareaAutocapitalize_characters SLTextareaAutocapitalizeChoice = "characters"
)

// Remove the attribute AUTOCAPITALIZE from the element.
func (e *SLTEXTAREAElement) AUTOCAPITALIZERemove(c SLTextareaAutocapitalizeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("autocapitalize")
	return e
}

func (e *SLTEXTAREAElement) AUTOCORRECT(c SLTextareaAutocorrectChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("autocorrect", string(c))
	return e
}

type SLTextareaAutocorrectChoice string

const (
	// Off
	SLTextareaAutocorrect_off SLTextareaAutocorrectChoice = "off"
	// None
	SLTextareaAutocorrect_none SLTextareaAutocorrectChoice = "none"
	// On
	SLTextareaAutocorrect_on SLTextareaAutocorrectChoice = "on"
)

// Remove the attribute AUTOCORRECT from the element.
func (e *SLTEXTAREAElement) AUTOCORRECTRemove(c SLTextareaAutocorrectChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("autocorrect")
	return e
}

func (e *SLTEXTAREAElement) AUTOCOMPLETE(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("autocomplete", s)
	return e
}

func (e *SLTEXTAREAElement) IfAUTOCOMPLETE(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.AUTOCOMPLETE(s)
	}
	return e
}

// Remove the attribute AUTOCOMPLETE from the element.
func (e *SLTEXTAREAElement) AUTOCOMPLETERemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("autocomplete")
	return e
}

func (e *SLTEXTAREAElement) SPELLCHECK() *SLTEXTAREAElement {
	e.SPELLCHECKSet(true)
	return e
}

func (e *SLTEXTAREAElement) IfSPELLCHECK(condition bool) *SLTEXTAREAElement {
	if condition {
		e.SPELLCHECKSet(true)
	}
	return e
}

// Set the attribute SPELLCHECK to the value b explicitly.
func (e *SLTEXTAREAElement) SPELLCHECKSet(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("spellcheck", b)
	return e
}

func (e *SLTEXTAREAElement) IfSetSPELLCHECK(condition bool, b bool) *SLTEXTAREAElement {
	if condition {
		e.SPELLCHECKSet(b)
	}
	return e
}

// Remove the attribute SPELLCHECK from the element.
func (e *SLTEXTAREAElement) SPELLCHECKRemove(b bool) *SLTEXTAREAElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("spellcheck")
	return e
}

func (e *SLTEXTAREAElement) INPUTMODE(c SLTextareaInputmodeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("inputmode", string(c))
	return e
}

type SLTextareaInputmodeChoice string

const (
	// Unset
	SLTextareaInputmode_empty SLTextareaInputmodeChoice = ""
	// None
	SLTextareaInputmode_none SLTextareaInputmodeChoice = "none"
	// Text
	SLTextareaInputmode_text SLTextareaInputmodeChoice = "text"
	// Decimal
	SLTextareaInputmode_decimal SLTextareaInputmodeChoice = "decimal"
	// Numeric
	SLTextareaInputmode_numeric SLTextareaInputmodeChoice = "numeric"
	// Tel
	SLTextareaInputmode_tel SLTextareaInputmodeChoice = "tel"
	// Search
	SLTextareaInputmode_search SLTextareaInputmodeChoice = "search"
	// Email
	SLTextareaInputmode_email SLTextareaInputmodeChoice = "email"
	// URL
	SLTextareaInputmode_url SLTextareaInputmodeChoice = "url"
)

// Remove the attribute INPUTMODE from the element.
func (e *SLTEXTAREAElement) INPUTMODERemove(c SLTextareaInputmodeChoice) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("inputmode")
	return e
}

func (e *SLTEXTAREAElement) DEFAULT_VALUE(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("defaultValue", s)
	return e
}

func (e *SLTEXTAREAElement) IfDEFAULT_VALUE(condition bool, s string) *SLTEXTAREAElement {
	if condition {
		e.DEFAULT_VALUE(s)
	}
	return e
}

// Remove the attribute DEFAULT_VALUE from the element.
func (e *SLTEXTAREAElement) DEFAULT_VALUERemove(s string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("defaultValue")
	return e
}

// Merges the store with the given object

func (e *SLTEXTAREAElement) DATASTAR_MERGE_STORE(v any) *SLTEXTAREAElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	e.CustomDataAttributes.Set("data-merge-store", string(b))
	return e
}

// Sets the reference of the element

func (e *SLTEXTAREAElement) DATASTAR_REF(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-ref"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_REF(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_REF(expression)
	}
	return e
}

// Remove the attribute DATASTAR_REF from the element.
func (e *SLTEXTAREAElement) DATASTAR_REFRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-ref")
	return e
}

// Sets the value of the element

func (e *SLTEXTAREAElement) DATASTAR_BIND(key string, expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-bind-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_BIND(condition bool, key string, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_BIND(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_BIND from the element.
func (e *SLTEXTAREAElement) DATASTAR_BINDRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-bind")
	return e
}

// Sets the value of the element

func (e *SLTEXTAREAElement) DATASTAR_MODEL(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-model"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_MODEL(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_MODEL(expression)
	}
	return e
}

// Remove the attribute DATASTAR_MODEL from the element.
func (e *SLTEXTAREAElement) DATASTAR_MODELRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-model")
	return e
}

// Sets the textContent of the element

func (e *SLTEXTAREAElement) DATASTAR_TEXT(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-text"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_TEXT(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_TEXT(expression)
	}
	return e
}

// Remove the attribute DATASTAR_TEXT from the element.
func (e *SLTEXTAREAElement) DATASTAR_TEXTRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-text")
	return e
}

// Sets the event handler of the element

type SLTextareaDataOnMod customDataKeyModifier

// Debounces the event handler
func SLTextareaDataOnModDebounce(
	d time.Duration,
) SLTextareaDataOnMod {
	return func() string {
		return fmt.Sprintf("debounce_%dms", d.Milliseconds())
	}
}

// Throttles the event handler
func SLTextareaDataOnModThrottle(
	d time.Duration,
) SLTextareaDataOnMod {
	return func() string {
		return fmt.Sprintf("throttle_%dms", d.Milliseconds())
	}
}

func (e *SLTEXTAREAElement) DATASTAR_ON(key string, expression string, modifiers ...SLTextareaDataOnMod) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-on-%s", key)

	customMods := lo.Map(modifiers, func(m SLTextareaDataOnMod, i int) customDataKeyModifier {
		return customDataKeyModifier(m)
	})
	key = customDataKey(key, customMods...)
	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_ON(condition bool, key string, expression string, modifiers ...SLTextareaDataOnMod) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_ON(key, expression, modifiers...)
	}
	return e
}

// Remove the attribute DATASTAR_ON from the element.
func (e *SLTEXTAREAElement) DATASTAR_ONRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-on")
	return e
}

// Sets the focus of the element

func (e *SLTEXTAREAElement) DATASTAR_FOCUSSet(b bool) *SLTEXTAREAElement {
	key := "data-focus"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLTEXTAREAElement) DATASTAR_FOCUS() *SLTEXTAREAElement {
	return e.DATASTAR_FOCUSSet(true)
}

// Sets the header of for fetch requests

func (e *SLTEXTAREAElement) DATASTAR_HEADER(key string, expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-header-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_HEADER(condition bool, key string, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_HEADER(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_HEADER from the element.
func (e *SLTEXTAREAElement) DATASTAR_HEADERRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-header")
	return e
}

// Sets the URL for fetch requests

func (e *SLTEXTAREAElement) DATASTAR_FETCH_URL(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-fetch-url"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_FETCH_URL(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_FETCH_URL(expression)
	}
	return e
}

// Remove the attribute DATASTAR_FETCH_URL from the element.
func (e *SLTEXTAREAElement) DATASTAR_FETCH_URLRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-fetch-url")
	return e
}

// Sets the indicator selector for fetch requests

func (e *SLTEXTAREAElement) DATASTAR_FETCH_INDICATOR(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "DatastarFetchIndicator"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_FETCH_INDICATOR(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_FETCH_INDICATOR(expression)
	}
	return e
}

// Remove the attribute DATASTAR_FETCH_INDICATOR from the element.
func (e *SLTEXTAREAElement) DATASTAR_FETCH_INDICATORRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("DatastarFetchIndicator")
	return e
}

// Sets the visibility of the element

func (e *SLTEXTAREAElement) DATASTAR_SHOWSet(b bool) *SLTEXTAREAElement {
	key := "data-show"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLTEXTAREAElement) DATASTAR_SHOW() *SLTEXTAREAElement {
	return e.DATASTAR_SHOWSet(true)
}

// Triggers the callback when the element intersects the viewport

func (e *SLTEXTAREAElement) DATASTAR_INTERSECTS(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-intersects"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_INTERSECTS(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_INTERSECTS(expression)
	}
	return e
}

// Remove the attribute DATASTAR_INTERSECTS from the element.
func (e *SLTEXTAREAElement) DATASTAR_INTERSECTSRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-intersects")
	return e
}

// Teleports the element to the given selector

func (e *SLTEXTAREAElement) DATASTAR_TELEPORTSet(b bool) *SLTEXTAREAElement {
	key := "data-teleport"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLTEXTAREAElement) DATASTAR_TELEPORT() *SLTEXTAREAElement {
	return e.DATASTAR_TELEPORTSet(true)
}

// Scrolls the element into view

func (e *SLTEXTAREAElement) DATASTAR_SCROLL_INTO_VIEWSet(b bool) *SLTEXTAREAElement {
	key := "data-scroll-into-view"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLTEXTAREAElement) DATASTAR_SCROLL_INTO_VIEW() *SLTEXTAREAElement {
	return e.DATASTAR_SCROLL_INTO_VIEWSet(true)
}

// Setup the ViewTransitionAPI for the element

func (e *SLTEXTAREAElement) DATASTAR_VIEW_TRANSITION(expression string) *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-view-transition"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLTEXTAREAElement) IfDATASTAR_VIEW_TRANSITION(condition bool, expression string) *SLTEXTAREAElement {
	if condition {
		e.DATASTAR_VIEW_TRANSITION(expression)
	}
	return e
}

// Remove the attribute DATASTAR_VIEW_TRANSITION from the element.
func (e *SLTEXTAREAElement) DATASTAR_VIEW_TRANSITIONRemove() *SLTEXTAREAElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-view-transition")
	return e
}
