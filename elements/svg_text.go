// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg text is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <text> SVG element renders the first character at the initial current text
// position
// This position is modified by the lengthAdjust and textLength attributes.
type SVGTEXTElement struct {
	*Element
}

// Create a new SVGTEXTElement element.
// This will create a new element with the tag
// "text" during rendering.
func SVG_TEXT(children ...ElementRenderer) *SVGTEXTElement {
	e := NewElement("text", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGTEXTElement{Element: e}
}

func (e *SVGTEXTElement) Children(children ...ElementRenderer) *SVGTEXTElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGTEXTElement) IfChildren(condition bool, children ...ElementRenderer) *SVGTEXTElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGTEXTElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGTEXTElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGTEXTElement) Text(text string) *SVGTEXTElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGTEXTElement) TextF(format string, args ...any) *SVGTEXTElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGTEXTElement) Escaped(text string) *SVGTEXTElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGTEXTElement) EscapedF(format string, args ...any) *SVGTEXTElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGTEXTElement) CustomData(key, value string) *SVGTEXTElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGTEXTElement) CustomDataRemove(key string) *SVGTEXTElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// The x-axis coordinate of the initial current text position.
func (e *SVGTEXTElement) X(f float64) *SVGTEXTElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("x", f)
	return e
}

// The y-axis coordinate of the initial current text position.
func (e *SVGTEXTElement) Y(f float64) *SVGTEXTElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("y", f)
	return e
}

// The x-axis coordinate of the current text position.
func (e *SVGTEXTElement) DX(f float64) *SVGTEXTElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("dx", f)
	return e
}

// The y-axis coordinate of the current text position.
func (e *SVGTEXTElement) DY(f float64) *SVGTEXTElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("dy", f)
	return e
}

// The rotation angle about the current text position.
func (e *SVGTEXTElement) ROTATE(f float64) *SVGTEXTElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("rotate", f)
	return e
}

// The total sum of all of the advance values from rendering all of the characters
// within this element, including the advance value on the glyph (horizontal or
// vertical), the effect of properties 'kerning', 'letter-spacing' and
// 'word-spacing' and adjustments due to attributes 'x' and 'y' on the <text>
// element.
func (e *SVGTEXTElement) TEXTLENGTH(f float64) *SVGTEXTElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("textLength", f)
	return e
}

// Indicates how the text is stretched or compressed to fit the textLength.
func (e *SVGTEXTElement) LENGTHADJUST(c SVGTextLengthAdjustChoice) *SVGTEXTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("lengthAdjust", string(c))
	return e
}

type SVGTextLengthAdjustChoice string

const (
	// Indicates how the text is stretched or compressed to fit the textLength.
	SVGTextLengthAdjust_spacing SVGTextLengthAdjustChoice = "spacing"
	// Indicates how the text is stretched or compressed to fit the textLength.
	SVGTextLengthAdjust_spacingAndGlyphs SVGTextLengthAdjustChoice = "spacingAndGlyphs"
)

// Remove the attribute lengthAdjust from the element.
func (e *SVGTEXTElement) LENGTHADJUSTRemove(c SVGTextLengthAdjustChoice) *SVGTEXTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("lengthAdjust")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGTEXTElement) CLASS(s ...string) *SVGTEXTElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

// Remove the attribute class from the element.
func (e *SVGTEXTElement) CLASSRemove(s ...string) *SVGTEXTElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGTEXTElement) ID(s string) *SVGTEXTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

// Remove the attribute id from the element.
func (e *SVGTEXTElement) IDRemove(s string) *SVGTEXTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGTEXTElement) STYLE(k string, v string) *SVGTEXTElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

// Add the attributes in the map to the element.
func (e *SVGTEXTElement) STYLEMap(m map[string]string) *SVGTEXTElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGTEXTElement) STYLEPairs(pairs ...string) *SVGTEXTElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

// Remove the attribute style from the element.
func (e *SVGTEXTElement) STYLERemove(keys ...string) *SVGTEXTElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
