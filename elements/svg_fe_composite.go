// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg feComposite is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <feComposite> SVG filter primitive performs the combination of two input
// images pixel-wise in image space using one of the Porter-Duff compositing
// operations: over, in, atop, out, xor.
type SVGFECOMPOSITEElement struct {
	*Element
}

// Create a new SVGFECOMPOSITEElement element.
// This will create a new element with the tag
// "feComposite" during rendering.
func SVG_FECOMPOSITE(children ...ElementRenderer) *SVGFECOMPOSITEElement {
	e := NewElement("feComposite", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGFECOMPOSITEElement{Element: e}
}

func (e *SVGFECOMPOSITEElement) Children(children ...ElementRenderer) *SVGFECOMPOSITEElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGFECOMPOSITEElement) IfChildren(condition bool, children ...ElementRenderer) *SVGFECOMPOSITEElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGFECOMPOSITEElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGFECOMPOSITEElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGFECOMPOSITEElement) Text(text string) *SVGFECOMPOSITEElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGFECOMPOSITEElement) TextF(format string, args ...any) *SVGFECOMPOSITEElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGFECOMPOSITEElement) Escaped(text string) *SVGFECOMPOSITEElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGFECOMPOSITEElement) EscapedF(format string, args ...any) *SVGFECOMPOSITEElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGFECOMPOSITEElement) CustomData(key, value string) *SVGFECOMPOSITEElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGFECOMPOSITEElement) CustomDataRemove(key string) *SVGFECOMPOSITEElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// Input for the compositing operation.
func (e *SVGFECOMPOSITEElement) IN(s string) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("in", s)
	return e
}

// Remove the attribute in from the element.
func (e *SVGFECOMPOSITEElement) INRemove(s string) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("in")
	return e
}

// Second input for the compositing operation.
func (e *SVGFECOMPOSITEElement) IN2(s string) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("in2", s)
	return e
}

// Remove the attribute in2 from the element.
func (e *SVGFECOMPOSITEElement) IN2Remove(s string) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("in2")
	return e
}

// The type of compositing operation.
func (e *SVGFECOMPOSITEElement) OPERATOR(c SVGFeCompositeOperatorChoice) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("operator", string(c))
	return e
}

type SVGFeCompositeOperatorChoice string

const (
	// The source image is composited over the destination image.
	SVGFeCompositeOperator_over SVGFeCompositeOperatorChoice = "over"
	// The part of the source image that lies inside of the destination image is
	// composited over the destination image.
	SVGFeCompositeOperator_in SVGFeCompositeOperatorChoice = "in"
	// The part of the source image that lies outside of the destination image is
	// composited over the destination image.
	SVGFeCompositeOperator_out SVGFeCompositeOperatorChoice = "out"
	// The part of the source image that lies inside of the destination image is
	// composited over the destination image and replaces the destination image.
	SVGFeCompositeOperator_atop SVGFeCompositeOperatorChoice = "atop"
	// The part of the source image that lies outside of the destination image is
	// composited over the destination image.
	SVGFeCompositeOperator_xor SVGFeCompositeOperatorChoice = "xor"
	// A standard arithmetic operator is applied (
	SVGFeCompositeOperator_arithmetic SVGFeCompositeOperatorChoice = "arithmetic"
)

// Remove the attribute operator from the element.
func (e *SVGFECOMPOSITEElement) OPERATORRemove(c SVGFeCompositeOperatorChoice) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("operator")
	return e
}

// First value to use in the arithmetic operation.
func (e *SVGFECOMPOSITEElement) K1(f float64) *SVGFECOMPOSITEElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("k1", f)
	return e
}

// Second value to use in the arithmetic operation.
func (e *SVGFECOMPOSITEElement) K2(f float64) *SVGFECOMPOSITEElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("k2", f)
	return e
}

// Third value to use in the arithmetic operation.
func (e *SVGFECOMPOSITEElement) K3(f float64) *SVGFECOMPOSITEElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("k3", f)
	return e
}

// Fourth value to use in the arithmetic operation.
func (e *SVGFECOMPOSITEElement) K4(f float64) *SVGFECOMPOSITEElement {
	if e.FloatAttributes == nil {
		e.FloatAttributes = treemap.New[string, float64]()
	}
	e.FloatAttributes.Set("k4", f)
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGFECOMPOSITEElement) CLASS(s ...string) *SVGFECOMPOSITEElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

// Remove the attribute class from the element.
func (e *SVGFECOMPOSITEElement) CLASSRemove(s ...string) *SVGFECOMPOSITEElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGFECOMPOSITEElement) ID(s string) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

// Remove the attribute id from the element.
func (e *SVGFECOMPOSITEElement) IDRemove(s string) *SVGFECOMPOSITEElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGFECOMPOSITEElement) STYLE(k string, v string) *SVGFECOMPOSITEElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

// Add the attributes in the map to the element.
func (e *SVGFECOMPOSITEElement) STYLEMap(m map[string]string) *SVGFECOMPOSITEElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGFECOMPOSITEElement) STYLEPairs(pairs ...string) *SVGFECOMPOSITEElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

// Remove the attribute style from the element.
func (e *SVGFECOMPOSITEElement) STYLERemove(keys ...string) *SVGFECOMPOSITEElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
