// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg filter is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <filter> SVG element defines a custom filter effect by grouping atomic
// filter primitives
// It is never rendered directly
// A filter is referenced by using the filter attribute on the target SVG element
// or via the filter CSS property.
type SVGFILTERElement struct {
	*Element
}

// Create a new SVGFILTERElement element.
// This will create a new element with the tag
// "filter" during rendering.
func SVG_FILTER(children ...ElementRenderer) *SVGFILTERElement {
	e := NewElement("filter", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGFILTERElement{Element: e}
}

func (e *SVGFILTERElement) Children(children ...ElementRenderer) *SVGFILTERElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGFILTERElement) IfChildren(condition bool, children ...ElementRenderer) *SVGFILTERElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGFILTERElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGFILTERElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGFILTERElement) Text(text string) *SVGFILTERElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGFILTERElement) TextF(format string, args ...any) *SVGFILTERElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGFILTERElement) Escaped(text string) *SVGFILTERElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGFILTERElement) EscapedF(format string, args ...any) *SVGFILTERElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGFILTERElement) CustomData(key, value string) *SVGFILTERElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGFILTERElement) CustomDataF(key, format string, args ...any) *SVGFILTERElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *SVGFILTERElement) CustomDataRemove(key string) *SVGFILTERElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// The coordinate system for attributes x, y, width and height.
func (e *SVGFILTERElement) FILTERUNITS(c SVGFilterFilterUnitsChoice) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("filterUnits", string(c))
	return e
}

type SVGFilterFilterUnitsChoice string

const (
	// The coordinate system for attributes x, y, width and height.
	SVGFilterFilterUnits_userSpaceOnUse SVGFilterFilterUnitsChoice = "userSpaceOnUse"
	// The coordinate system for attributes x, y, width and height.
	SVGFilterFilterUnits_objectBoundingBox SVGFilterFilterUnitsChoice = "objectBoundingBox"
)

// Remove the attribute filterUnits from the element.
func (e *SVGFILTERElement) FILTERUNITSRemove(c SVGFilterFilterUnitsChoice) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("filterUnits")
	return e
}

// The coordinate system for the various length values within the filter.
func (e *SVGFILTERElement) PRIMITIVEUNITS(c SVGFilterPrimitiveUnitsChoice) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("primitiveUnits", string(c))
	return e
}

type SVGFilterPrimitiveUnitsChoice string

const (
	// The coordinate system for the various length values within the filter.
	SVGFilterPrimitiveUnits_userSpaceOnUse SVGFilterPrimitiveUnitsChoice = "userSpaceOnUse"
	// The coordinate system for the various length values within the filter.
	SVGFilterPrimitiveUnits_objectBoundingBox SVGFilterPrimitiveUnitsChoice = "objectBoundingBox"
)

// Remove the attribute primitiveUnits from the element.
func (e *SVGFILTERElement) PRIMITIVEUNITSRemove(c SVGFilterPrimitiveUnitsChoice) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("primitiveUnits")
	return e
}

// The x attribute indicates where the left edge of the filter is placed.
func (e *SVGFILTERElement) X(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("x", s)
	return e
}

// Remove the attribute x from the element.
func (e *SVGFILTERElement) XRemove(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("x")
	return e
}

// The y attribute indicates where the top edge of the filter is placed.
func (e *SVGFILTERElement) Y(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("y", s)
	return e
}

// Remove the attribute y from the element.
func (e *SVGFILTERElement) YRemove(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("y")
	return e
}

// The width attribute indicates the width of the filter primitive box.
func (e *SVGFILTERElement) WIDTH(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("width", s)
	return e
}

// Remove the attribute width from the element.
func (e *SVGFILTERElement) WIDTHRemove(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("width")
	return e
}

// The height attribute indicates the height of the filter primitive box.
func (e *SVGFILTERElement) HEIGHT(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("height", s)
	return e
}

// Remove the attribute height from the element.
func (e *SVGFILTERElement) HEIGHTRemove(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("height")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGFILTERElement) CLASS(s ...string) *SVGFILTERElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

// Remove the attribute class from the element.
func (e *SVGFILTERElement) CLASSRemove(s ...string) *SVGFILTERElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGFILTERElement) ID(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

// Remove the attribute id from the element.
func (e *SVGFILTERElement) IDRemove(s string) *SVGFILTERElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGFILTERElement) STYLEF(k string, format string, args ...any) *SVGFILTERElement {
	return e.STYLE(k, fmt.Sprintf(format, args...))
}

func (e *SVGFILTERElement) STYLE(k string, v string) *SVGFILTERElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

// Add the attributes in the map to the element.
func (e *SVGFILTERElement) STYLEMap(m map[string]string) *SVGFILTERElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGFILTERElement) STYLEPairs(pairs ...string) *SVGFILTERElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

// Remove the attribute style from the element.
func (e *SVGFILTERElement) STYLERemove(keys ...string) *SVGFILTERElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
