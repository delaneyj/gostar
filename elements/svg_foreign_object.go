// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package svg foreignObject is generated from configuration file.
// Description:
package elements

import (
	"fmt"

	"github.com/igrmk/treemap/v2"
)

// The <foreignObject> SVG element allows for inclusion of a foreign XML namespace
// which has its graphical content drawn by a different user agent
// The included foreign graphical content is subject to SVG transformations and
// compositing.
type SVGFOREIGNOBJECTElement struct {
	*Element
}

// Create a new SVGFOREIGNOBJECTElement element.
// This will create a new element with the tag
// "foreignObject" during rendering.
func SVG_FOREIGNOBJECT(children ...ElementRenderer) *SVGFOREIGNOBJECTElement {
	e := NewElement("foreignObject", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SVGFOREIGNOBJECTElement{Element: e}
}

func (e *SVGFOREIGNOBJECTElement) Children(children ...ElementRenderer) *SVGFOREIGNOBJECTElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfChildren(condition bool, children ...ElementRenderer) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) Text(text string) *SVGFOREIGNOBJECTElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SVGFOREIGNOBJECTElement) TextF(format string, args ...any) *SVGFOREIGNOBJECTElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SVGFOREIGNOBJECTElement) IfText(condition bool, text string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(text))
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfTextF(condition bool, format string, args ...any) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) Escaped(text string) *SVGFOREIGNOBJECTElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfEscaped(condition bool, text string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Descendants = append(e.Descendants, Escaped(text))
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) EscapedF(format string, args ...any) *SVGFOREIGNOBJECTElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SVGFOREIGNOBJECTElement) IfEscapedF(condition bool, format string, args ...any) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Descendants = append(e.Descendants, EscapedF(format, args...))
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) CustomData(key, value string) *SVGFOREIGNOBJECTElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfCustomData(condition bool, key, value string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.CustomData(key, value)
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) CustomDataF(key, format string, args ...any) *SVGFOREIGNOBJECTElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *SVGFOREIGNOBJECTElement) IfCustomDataF(condition bool, key, format string, args ...any) *SVGFOREIGNOBJECTElement {
	if condition {
		e.CustomData(key, fmt.Sprintf(format, args...))
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) CustomDataRemove(key string) *SVGFOREIGNOBJECTElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// The x-axis coordinate of the side of the rectangular region which is closest to
// the user.
func (e *SVGFOREIGNOBJECTElement) X(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("x", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfX(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.X(s)
	}
	return e
}

// Remove the attribute x from the element.
func (e *SVGFOREIGNOBJECTElement) XRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("x")
	return e
}

// The y-axis coordinate of the side of the rectangular region which is closest to
// the user.
func (e *SVGFOREIGNOBJECTElement) Y(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("y", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfY(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.Y(s)
	}
	return e
}

// Remove the attribute y from the element.
func (e *SVGFOREIGNOBJECTElement) YRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("y")
	return e
}

// The width of the rectangular region.
func (e *SVGFOREIGNOBJECTElement) WIDTH(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("width", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfWIDTH(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.WIDTH(s)
	}
	return e
}

// Remove the attribute width from the element.
func (e *SVGFOREIGNOBJECTElement) WIDTHRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("width")
	return e
}

// The height of the rectangular region.
func (e *SVGFOREIGNOBJECTElement) HEIGHT(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("height", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfHEIGHT(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.HEIGHT(s)
	}
	return e
}

// Remove the attribute height from the element.
func (e *SVGFOREIGNOBJECTElement) HEIGHTRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("height")
	return e
}

// A space-separated list of required extensions, indicating that the parent SVG
// document must include the specified extensions for this element to be valid.
func (e *SVGFOREIGNOBJECTElement) REQUIREDEXTENSIONS(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("requiredExtensions", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfREQUIREDEXTENSIONS(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.REQUIREDEXTENSIONS(s)
	}
	return e
}

// Remove the attribute requiredExtensions from the element.
func (e *SVGFOREIGNOBJECTElement) REQUIREDEXTENSIONSRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("requiredExtensions")
	return e
}

// A space-separated list of required features, indicating that the parent SVG
// document must include support for all of the specified features for this
// element to be valid.
func (e *SVGFOREIGNOBJECTElement) REQUIREDFEATURES(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("requiredFeatures", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfREQUIREDFEATURES(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.REQUIREDFEATURES(s)
	}
	return e
}

// Remove the attribute requiredFeatures from the element.
func (e *SVGFOREIGNOBJECTElement) REQUIREDFEATURESRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("requiredFeatures")
	return e
}

// A space-separated list of language codes, indicating that the parent SVG
// document must include support for all of the specified languages for this
// element to be valid.
func (e *SVGFOREIGNOBJECTElement) SYSTEMLANGUAGE(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("systemLanguage", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfSYSTEMLANGUAGE(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.SYSTEMLANGUAGE(s)
	}
	return e
}

// Remove the attribute systemLanguage from the element.
func (e *SVGFOREIGNOBJECTElement) SYSTEMLANGUAGERemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("systemLanguage")
	return e
}

// Specifies one or more classnames for an element (refers to a class in a style
// sheet)
func (e *SVGFOREIGNOBJECTElement) CLASS(s ...string) *SVGFOREIGNOBJECTElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfCLASS(condition bool, s ...string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.CLASS(s...)
	}
	return e
}

// Remove the attribute class from the element.
func (e *SVGFOREIGNOBJECTElement) CLASSRemove(s ...string) *SVGFOREIGNOBJECTElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// Specifies a unique id for an element
func (e *SVGFOREIGNOBJECTElement) ID(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfID(condition bool, s string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.ID(s)
	}
	return e
}

// Remove the attribute id from the element.
func (e *SVGFOREIGNOBJECTElement) IDRemove(s string) *SVGFOREIGNOBJECTElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

// Specifies an inline CSS style for an element
func (e *SVGFOREIGNOBJECTElement) STYLEF(k string, format string, args ...any) *SVGFOREIGNOBJECTElement {
	return e.STYLE(k, fmt.Sprintf(format, args...))
}

func (e *SVGFOREIGNOBJECTElement) IfSTYLE(condition bool, k string, v string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.STYLE(k, v)
	}
	return e
}

func (e *SVGFOREIGNOBJECTElement) STYLE(k string, v string) *SVGFOREIGNOBJECTElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

func (e *SVGFOREIGNOBJECTElement) IfSTYLEF(condition bool, k string, format string, args ...any) *SVGFOREIGNOBJECTElement {
	if condition {
		e.STYLE(k, fmt.Sprintf(format, args...))
	}
	return e
}

// Add the attributes in the map to the element.
func (e *SVGFOREIGNOBJECTElement) STYLEMap(m map[string]string) *SVGFOREIGNOBJECTElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *SVGFOREIGNOBJECTElement) STYLEPairs(pairs ...string) *SVGFOREIGNOBJECTElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

func (e *SVGFOREIGNOBJECTElement) IfSTYLEPairs(condition bool, pairs ...string) *SVGFOREIGNOBJECTElement {
	if condition {
		e.STYLEPairs(pairs...)
	}
	return e
}

// Remove the attribute style from the element.
func (e *SVGFOREIGNOBJECTElement) STYLERemove(keys ...string) *SVGFOREIGNOBJECTElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}
