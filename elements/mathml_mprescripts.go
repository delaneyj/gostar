// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package mathml mprescripts is generated from configuration file.
// Description:
package elements

import (
	"fmt"
	"html"
	"time"

	"github.com/goccy/go-json"
	"github.com/igrmk/treemap/v2"
	"github.com/samber/lo"
)

// This element is used to display a base expression with multiple subscripts and
// superscripts.
type MathMLMPRESCRIPTSElement struct {
	*Element
}

// Create a new MathMLMPRESCRIPTSElement element.
// This will create a new element with the tag
// "mprescripts" during rendering.
func MathML_MPRESCRIPTS(children ...ElementRenderer) *MathMLMPRESCRIPTSElement {
	e := NewElement("mprescripts", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &MathMLMPRESCRIPTSElement{Element: e}
}

func (e *MathMLMPRESCRIPTSElement) Children(children ...ElementRenderer) *MathMLMPRESCRIPTSElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfChildren(condition bool, children ...ElementRenderer) *MathMLMPRESCRIPTSElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *MathMLMPRESCRIPTSElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) Attr(name string, value string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set(name, value)
	return e
}

func (e *MathMLMPRESCRIPTSElement) Attrs(attrs ...string) *MathMLMPRESCRIPTSElement {
	if len(attrs)%2 != 0 {
		panic("attrs must be a multiple of 2")
	}
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for i := 0; i < len(attrs); i += 2 {
		k := attrs[i]
		v := attrs[i+1]
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) AttrsMap(attrs map[string]string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for k, v := range attrs {
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) Text(text string) *MathMLMPRESCRIPTSElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *MathMLMPRESCRIPTSElement) TextF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfText(condition bool, text string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(text))
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfTextF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) Escaped(text string) *MathMLMPRESCRIPTSElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfEscaped(condition bool, text string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.Descendants = append(e.Descendants, Escaped(text))
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) EscapedF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfEscapedF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.Descendants = append(e.Descendants, EscapedF(format, args...))
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) CustomData(key, value string) *MathMLMPRESCRIPTSElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfCustomData(condition bool, key, value string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.CustomData(key, value)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) CustomDataF(key, format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfCustomDataF(condition bool, key, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.CustomData(key, fmt.Sprintf(format, args...))
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) CustomDataRemove(key string) *MathMLMPRESCRIPTSElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

// Assigns a class name or set of class names to an element
// You may assign the same class name or names to any number of elements
// If you specify multiple class names, they must be separated by whitespace
// characters.
func (e *MathMLMPRESCRIPTSElement) CLASS(s ...string) *MathMLMPRESCRIPTSElement {
	if e.DelimitedStrings == nil {
		e.DelimitedStrings = treemap.New[string, *DelimitedBuilder[string]]()
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		ds = NewDelimitedBuilder[string](" ")
		e.DelimitedStrings.Set("class", ds)
	}
	ds.Add(s...)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfCLASS(condition bool, s ...string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.CLASS(s...)
	}
	return e
}

// Remove the attribute CLASS from the element.
func (e *MathMLMPRESCRIPTSElement) CLASSRemove(s ...string) *MathMLMPRESCRIPTSElement {
	if e.DelimitedStrings == nil {
		return e
	}
	ds, ok := e.DelimitedStrings.Get("class")
	if !ok {
		return e
	}
	ds.Remove(s...)
	return e
}

// This attribute specifies the text directionality of the element, merely
// indicating what direction the text flows when surrounded by text with inherent
// directionality (such as Arabic or Hebrew)
// Possible values are ltr (left-to-right) and rtl (right-to-left).
func (e *MathMLMPRESCRIPTSElement) DIR(c MathMLMprescriptsDirChoice) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("dir", string(c))
	return e
}

type MathMLMprescriptsDirChoice string

const (
	// left-to-right
	MathMLMprescriptsDir_ltr MathMLMprescriptsDirChoice = "ltr"
	// right-to-left
	MathMLMprescriptsDir_rtl MathMLMprescriptsDirChoice = "rtl"
)

// Remove the attribute DIR from the element.
func (e *MathMLMPRESCRIPTSElement) DIRRemove(c MathMLMprescriptsDirChoice) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("dir")
	return e
}

// This attribute specifies whether the element should be rendered using
// displaystyle rules or not
// Possible values are true and false.
func (e *MathMLMPRESCRIPTSElement) DISPLAYSTYLE(c MathMLMprescriptsDisplaystyleChoice) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("displaystyle", string(c))
	return e
}

type MathMLMprescriptsDisplaystyleChoice string

const (
	// displaystyle rules
	MathMLMprescriptsDisplaystyle_true MathMLMprescriptsDisplaystyleChoice = "true"
	// not displaystyle rules
	MathMLMprescriptsDisplaystyle_false MathMLMprescriptsDisplaystyleChoice = "false"
)

// Remove the attribute DISPLAYSTYLE from the element.
func (e *MathMLMPRESCRIPTSElement) DISPLAYSTYLERemove(c MathMLMprescriptsDisplaystyleChoice) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("displaystyle")
	return e
}

// This attribute assigns a name to an element
// This name must be unique in a document.
func (e *MathMLMPRESCRIPTSElement) ID(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("id", s)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IDF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.ID(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfID(condition bool, s string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.ID(s)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfIDF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.ID(fmt.Sprintf(format, args...))
	}
	return e
}

// Remove the attribute ID from the element.
func (e *MathMLMPRESCRIPTSElement) IDRemove(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("id")
	return e
}

func (e *MathMLMPRESCRIPTSElement) IDRemoveF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.IDRemove(fmt.Sprintf(format, args...))
}

// This attribute specifies the background color of the element
// Possible values are a color name or a color specification in the format defined
// in the CSS3 Color Module [CSS3COLOR].
func (e *MathMLMPRESCRIPTSElement) MATHBACKGROUND(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("mathbackground", s)
	return e
}

func (e *MathMLMPRESCRIPTSElement) MATHBACKGROUNDF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.MATHBACKGROUND(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfMATHBACKGROUND(condition bool, s string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.MATHBACKGROUND(s)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfMATHBACKGROUNDF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.MATHBACKGROUND(fmt.Sprintf(format, args...))
	}
	return e
}

// Remove the attribute MATHBACKGROUND from the element.
func (e *MathMLMPRESCRIPTSElement) MATHBACKGROUNDRemove(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("mathbackground")
	return e
}

func (e *MathMLMPRESCRIPTSElement) MATHBACKGROUNDRemoveF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.MATHBACKGROUNDRemove(fmt.Sprintf(format, args...))
}

// This attribute specifies the color of the element
// Possible values are a color name or a color specification in the format defined
// in the CSS3 Color Module [CSS3COLOR].
func (e *MathMLMPRESCRIPTSElement) MATHCOLOR(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("mathcolor", s)
	return e
}

func (e *MathMLMPRESCRIPTSElement) MATHCOLORF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.MATHCOLOR(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfMATHCOLOR(condition bool, s string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.MATHCOLOR(s)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfMATHCOLORF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.MATHCOLOR(fmt.Sprintf(format, args...))
	}
	return e
}

// Remove the attribute MATHCOLOR from the element.
func (e *MathMLMPRESCRIPTSElement) MATHCOLORRemove(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("mathcolor")
	return e
}

func (e *MathMLMPRESCRIPTSElement) MATHCOLORRemoveF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.MATHCOLORRemove(fmt.Sprintf(format, args...))
}

// This attribute specifies the size of the element
// Possible values are a dimension or a dimensionless number.
func (e *MathMLMPRESCRIPTSElement) MATHSIZE_STR(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("mathsize", s)
	return e
}

func (e *MathMLMPRESCRIPTSElement) MATHSIZE_STRF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.MATHSIZE_STR(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfMATHSIZE_STR(condition bool, s string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.MATHSIZE_STR(s)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfMATHSIZE_STRF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.MATHSIZE_STR(fmt.Sprintf(format, args...))
	}
	return e
}

// Remove the attribute MATHSIZE_STR from the element.
func (e *MathMLMPRESCRIPTSElement) MATHSIZE_STRRemove(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("mathsize")
	return e
}

func (e *MathMLMPRESCRIPTSElement) MATHSIZE_STRRemoveF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.MATHSIZE_STRRemove(fmt.Sprintf(format, args...))
}

// This attribute declares a cryptographic nonce (number used once) that should be
// used by the server processing the element’s submission, and the resulting
// resource must be delivered with a Content-Security-Policy nonce attribute
// matching the value of the nonce attribute.
func (e *MathMLMPRESCRIPTSElement) NONCE(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("nonce", s)
	return e
}

func (e *MathMLMPRESCRIPTSElement) NONCEF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.NONCE(fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfNONCE(condition bool, s string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.NONCE(s)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfNONCEF(condition bool, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.NONCE(fmt.Sprintf(format, args...))
	}
	return e
}

// Remove the attribute NONCE from the element.
func (e *MathMLMPRESCRIPTSElement) NONCERemove(s string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("nonce")
	return e
}

func (e *MathMLMPRESCRIPTSElement) NONCERemoveF(format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.NONCERemove(fmt.Sprintf(format, args...))
}

// This attribute specifies the script level of the element
// Possible values are an integer between 0 and 7, inclusive.
func (e *MathMLMPRESCRIPTSElement) SCRIPTLEVEL(i int) *MathMLMPRESCRIPTSElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("scriptlevel", i)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfSCRIPTLEVEL(condition bool, i int) *MathMLMPRESCRIPTSElement {
	if condition {
		e.SCRIPTLEVEL(i)
	}
	return e
}

// Remove the attribute SCRIPTLEVEL from the element.
func (e *MathMLMPRESCRIPTSElement) SCRIPTLEVELRemove(i int) *MathMLMPRESCRIPTSElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("scriptlevel")
	return e
}

// This attribute offers advisory information about the element for which it is
// set.
func (e *MathMLMPRESCRIPTSElement) STYLEF(k string, format string, args ...any) *MathMLMPRESCRIPTSElement {
	return e.STYLE(k, fmt.Sprintf(format, args...))
}

func (e *MathMLMPRESCRIPTSElement) IfSTYLE(condition bool, k string, v string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.STYLE(k, v)
	}
	return e
}

func (e *MathMLMPRESCRIPTSElement) STYLE(k string, v string) *MathMLMPRESCRIPTSElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	kv.Add(k, v)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfSTYLEF(condition bool, k string, format string, args ...any) *MathMLMPRESCRIPTSElement {
	if condition {
		e.STYLE(k, fmt.Sprintf(format, args...))
	}
	return e
}

// Add the attributes in the map to the element.
func (e *MathMLMPRESCRIPTSElement) STYLEMap(m map[string]string) *MathMLMPRESCRIPTSElement {
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}
	for k, v := range m {
		kv.Add(k, v)
	}
	return e
}

// Add pairs of attributes to the element.
func (e *MathMLMPRESCRIPTSElement) STYLEPairs(pairs ...string) *MathMLMPRESCRIPTSElement {
	if len(pairs)%2 != 0 {
		panic("Must have an even number of pairs")
	}
	if e.KVStrings == nil {
		e.KVStrings = treemap.New[string, *KVBuilder]()
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		kv = NewKVBuilder(":", ";")
		e.KVStrings.Set("style", kv)
	}

	for i := 0; i < len(pairs); i += 2 {
		kv.Add(pairs[i], pairs[i+1])
	}

	return e
}

func (e *MathMLMPRESCRIPTSElement) IfSTYLEPairs(condition bool, pairs ...string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.STYLEPairs(pairs...)
	}
	return e
}

// Remove the attribute STYLE from the element.
func (e *MathMLMPRESCRIPTSElement) STYLERemove(keys ...string) *MathMLMPRESCRIPTSElement {
	if e.KVStrings == nil {
		return e
	}
	kv, ok := e.KVStrings.Get("style")
	if !ok {
		return e
	}
	for _, k := range keys {
		kv.Remove(k)
	}
	return e
}

// This attribute specifies the position of the current element in the tabbing
// order for the current document
// This value must be a number between 0 and 32767
// User agents should ignore leading zeros.
func (e *MathMLMPRESCRIPTSElement) TABINDEX(i int) *MathMLMPRESCRIPTSElement {
	if e.IntAttributes == nil {
		e.IntAttributes = treemap.New[string, int]()
	}
	e.IntAttributes.Set("tabindex", i)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfTABINDEX(condition bool, i int) *MathMLMPRESCRIPTSElement {
	if condition {
		e.TABINDEX(i)
	}
	return e
}

// Remove the attribute TABINDEX from the element.
func (e *MathMLMPRESCRIPTSElement) TABINDEXRemove(i int) *MathMLMPRESCRIPTSElement {
	if e.IntAttributes == nil {
		return e
	}
	e.IntAttributes.Del("tabindex")
	return e
}

// Merges the store with the given object

func (e *MathMLMPRESCRIPTSElement) DATASTAR_MERGE_STORE(v any) *MathMLMPRESCRIPTSElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	e.CustomDataAttributes.Set("merge-store", html.EscapeString(string(b)))
	return e
}

// Sets the reference of the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_REF(expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-ref"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_REF(condition bool, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_REF(expression)
	}
	return e
}

// Remove the attribute DATASTAR_REF from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_REFRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-ref")
	return e
}

// Sets the value of the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_BIND(key string, expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-bind-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_BIND(condition bool, key string, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_BIND(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_BIND from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_BINDRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-bind")
	return e
}

// Sets the value of the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_MODEL(expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-model"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_MODEL(condition bool, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_MODEL(expression)
	}
	return e
}

// Remove the attribute DATASTAR_MODEL from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_MODELRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-model")
	return e
}

// Sets the textContent of the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_TEXT(expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-text"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_TEXT(condition bool, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_TEXT(expression)
	}
	return e
}

// Remove the attribute DATASTAR_TEXT from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_TEXTRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-text")
	return e
}

// Sets the event handler of the element

type MathMLMprescriptsOnMod customDataKeyModifier

// Debounces the event handler
func MathMLMprescriptsOnModDebounce(
	d time.Duration,
) MathMLMprescriptsOnMod {
	return func() string {
		return fmt.Sprintf("debounce_%dms", d.Milliseconds())
	}
}

// Throttles the event handler
func MathMLMprescriptsOnModThrottle(
	d time.Duration,
) MathMLMprescriptsOnMod {
	return func() string {
		return fmt.Sprintf("throttle_%dms", d.Milliseconds())
	}
}

func (e *MathMLMPRESCRIPTSElement) DATASTAR_ON(key string, expression string, modifiers ...MathMLMprescriptsOnMod) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-on-%s", key)

	customMods := lo.Map(modifiers, func(m MathMLMprescriptsOnMod, i int) customDataKeyModifier {
		return customDataKeyModifier(m)
	})
	key = customDataKey(key, customMods...)
	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_ON(condition bool, key string, expression string, modifiers ...MathMLMprescriptsOnMod) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_ON(key, expression, modifiers...)
	}
	return e
}

// Remove the attribute DATASTAR_ON from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_ONRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-on")
	return e
}

// Sets the focus of the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_FOCUSSet(b bool) *MathMLMPRESCRIPTSElement {
	key := "data-focus"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *MathMLMPRESCRIPTSElement) DATASTAR_FOCUS() *MathMLMPRESCRIPTSElement {
	return e.DATASTAR_FOCUSSet(true)
}

// Sets the header of for fetch requests

func (e *MathMLMPRESCRIPTSElement) DATASTAR_HEADER(key string, expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-header-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_HEADER(condition bool, key string, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_HEADER(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_HEADER from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_HEADERRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-header")
	return e
}

// Sets the indicator selector for fetch requests

func (e *MathMLMPRESCRIPTSElement) DATASTAR_FETCH_INDICATOR(expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-fetch-indicator"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_FETCH_INDICATOR(condition bool, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_FETCH_INDICATOR(expression)
	}
	return e
}

// Remove the attribute DATASTAR_FETCH_INDICATOR from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_FETCH_INDICATORRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-fetch-indicator")
	return e
}

// Sets the visibility of the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_SHOWSet(b bool) *MathMLMPRESCRIPTSElement {
	key := "data-show"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *MathMLMPRESCRIPTSElement) DATASTAR_SHOW() *MathMLMPRESCRIPTSElement {
	return e.DATASTAR_SHOWSet(true)
}

// Triggers the callback when the element intersects the viewport

func (e *MathMLMPRESCRIPTSElement) DATASTAR_INTERSECTS(expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-intersects"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_INTERSECTS(condition bool, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_INTERSECTS(expression)
	}
	return e
}

// Remove the attribute DATASTAR_INTERSECTS from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_INTERSECTSRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-intersects")
	return e
}

// Teleports the element to the given selector

func (e *MathMLMPRESCRIPTSElement) DATASTAR_TELEPORTSet(b bool) *MathMLMPRESCRIPTSElement {
	key := "data-teleport"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *MathMLMPRESCRIPTSElement) DATASTAR_TELEPORT() *MathMLMPRESCRIPTSElement {
	return e.DATASTAR_TELEPORTSet(true)
}

// Scrolls the element into view

func (e *MathMLMPRESCRIPTSElement) DATASTAR_SCROLL_INTO_VIEWSet(b bool) *MathMLMPRESCRIPTSElement {
	key := "data-scroll-into-view"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *MathMLMPRESCRIPTSElement) DATASTAR_SCROLL_INTO_VIEW() *MathMLMPRESCRIPTSElement {
	return e.DATASTAR_SCROLL_INTO_VIEWSet(true)
}

// Setup the ViewTransitionAPI for the element

func (e *MathMLMPRESCRIPTSElement) DATASTAR_VIEW_TRANSITION(expression string) *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-view-transition"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *MathMLMPRESCRIPTSElement) IfDATASTAR_VIEW_TRANSITION(condition bool, expression string) *MathMLMPRESCRIPTSElement {
	if condition {
		e.DATASTAR_VIEW_TRANSITION(expression)
	}
	return e
}

// Remove the attribute DATASTAR_VIEW_TRANSITION from the element.
func (e *MathMLMPRESCRIPTSElement) DATASTAR_VIEW_TRANSITIONRemove() *MathMLMPRESCRIPTSElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-view-transition")
	return e
}
