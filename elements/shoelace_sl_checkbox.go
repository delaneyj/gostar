// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED.
// package Shoelace Checkbox is generated from configuration file.
// Description:
package elements

import (
	"fmt"
	"time"

	"github.com/goccy/go-json"
	"github.com/igrmk/treemap/v2"
	"github.com/samber/lo"
)

type SLCHECKBOXElement struct {
	*Element
}

// Create a new SLCHECKBOXElement element.
// This will create a new element with the tag
// "sl-checkbox" during rendering.
func SL_CHECKBOX(children ...ElementRenderer) *SLCHECKBOXElement {
	e := NewElement("sl-checkbox", children...)
	e.IsSelfClosing = false
	e.Descendants = children

	return &SLCHECKBOXElement{Element: e}
}

func (e *SLCHECKBOXElement) Children(children ...ElementRenderer) *SLCHECKBOXElement {
	e.Descendants = append(e.Descendants, children...)
	return e
}

func (e *SLCHECKBOXElement) IfChildren(condition bool, children ...ElementRenderer) *SLCHECKBOXElement {
	if condition {
		e.Descendants = append(e.Descendants, children...)
	}
	return e
}

func (e *SLCHECKBOXElement) TernChildren(condition bool, trueChildren, falseChildren ElementRenderer) *SLCHECKBOXElement {
	if condition {
		e.Descendants = append(e.Descendants, trueChildren)
	} else {
		e.Descendants = append(e.Descendants, falseChildren)
	}
	return e
}

func (e *SLCHECKBOXElement) Attr(name string, value string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set(name, value)
	return e
}

func (e *SLCHECKBOXElement) Attrs(attrs ...string) *SLCHECKBOXElement {
	if len(attrs)%2 != 0 {
		panic("attrs must be a multiple of 2")
	}
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for i := 0; i < len(attrs); i += 2 {
		k := attrs[i]
		v := attrs[i+1]
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *SLCHECKBOXElement) AttrsMap(attrs map[string]string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	for k, v := range attrs {
		e.StringAttributes.Set(k, v)
	}
	return e
}

func (e *SLCHECKBOXElement) Text(text string) *SLCHECKBOXElement {
	e.Descendants = append(e.Descendants, Text(text))
	return e
}

func (e *SLCHECKBOXElement) TextF(format string, args ...any) *SLCHECKBOXElement {
	return e.Text(fmt.Sprintf(format, args...))
}

func (e *SLCHECKBOXElement) IfText(condition bool, text string) *SLCHECKBOXElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(text))
	}
	return e
}

func (e *SLCHECKBOXElement) IfTextF(condition bool, format string, args ...any) *SLCHECKBOXElement {
	if condition {
		e.Descendants = append(e.Descendants, Text(fmt.Sprintf(format, args...)))
	}
	return e
}

func (e *SLCHECKBOXElement) Escaped(text string) *SLCHECKBOXElement {
	e.Descendants = append(e.Descendants, Escaped(text))
	return e
}

func (e *SLCHECKBOXElement) IfEscaped(condition bool, text string) *SLCHECKBOXElement {
	if condition {
		e.Descendants = append(e.Descendants, Escaped(text))
	}
	return e
}

func (e *SLCHECKBOXElement) EscapedF(format string, args ...any) *SLCHECKBOXElement {
	return e.Escaped(fmt.Sprintf(format, args...))
}

func (e *SLCHECKBOXElement) IfEscapedF(condition bool, format string, args ...any) *SLCHECKBOXElement {
	if condition {
		e.Descendants = append(e.Descendants, EscapedF(format, args...))
	}
	return e
}

func (e *SLCHECKBOXElement) CustomData(key, value string) *SLCHECKBOXElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	e.CustomDataAttributes.Set(key, value)
	return e
}

func (e *SLCHECKBOXElement) IfCustomData(condition bool, key, value string) *SLCHECKBOXElement {
	if condition {
		e.CustomData(key, value)
	}
	return e
}

func (e *SLCHECKBOXElement) CustomDataF(key, format string, args ...any) *SLCHECKBOXElement {
	return e.CustomData(key, fmt.Sprintf(format, args...))
}

func (e *SLCHECKBOXElement) IfCustomDataF(condition bool, key, format string, args ...any) *SLCHECKBOXElement {
	if condition {
		e.CustomData(key, fmt.Sprintf(format, args...))
	}
	return e
}

func (e *SLCHECKBOXElement) CustomDataRemove(key string) *SLCHECKBOXElement {
	if e.CustomDataAttributes == nil {
		return e
	}
	e.CustomDataAttributes.Del(key)
	return e
}

func (e *SLCHECKBOXElement) SIZE(c SLCheckboxSizeChoice) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("size", string(c))
	return e
}

type SLCheckboxSizeChoice string

const (
	// Small
	SLCheckboxSize_small SLCheckboxSizeChoice = "small"
	// Medium
	SLCheckboxSize_medium SLCheckboxSizeChoice = "medium"
	// Large
	SLCheckboxSize_large SLCheckboxSizeChoice = "large"
)

// Remove the attribute SIZE from the element.
func (e *SLCHECKBOXElement) SIZERemove(c SLCheckboxSizeChoice) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("size")
	return e
}

func (e *SLCHECKBOXElement) NAME(s string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}
	e.StringAttributes.Set("name", s)
	return e
}

func (e *SLCHECKBOXElement) IfNAME(condition bool, s string) *SLCHECKBOXElement {
	if condition {
		e.NAME(s)
	}
	return e
}

// Remove the attribute NAME from the element.
func (e *SLCHECKBOXElement) NAMERemove(s string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("name")
	return e
}

func (e *SLCHECKBOXElement) DISABLED() *SLCHECKBOXElement {
	e.DISABLEDSet(true)
	return e
}

func (e *SLCHECKBOXElement) IfDISABLED(condition bool) *SLCHECKBOXElement {
	if condition {
		e.DISABLEDSet(true)
	}
	return e
}

// Set the attribute DISABLED to the value b explicitly.
func (e *SLCHECKBOXElement) DISABLEDSet(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("disabled", b)
	return e
}

func (e *SLCHECKBOXElement) IfSetDISABLED(condition bool, b bool) *SLCHECKBOXElement {
	if condition {
		e.DISABLEDSet(b)
	}
	return e
}

// Remove the attribute DISABLED from the element.
func (e *SLCHECKBOXElement) DISABLEDRemove(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("disabled")
	return e
}

func (e *SLCHECKBOXElement) INDETERMINATE() *SLCHECKBOXElement {
	e.INDETERMINATESet(true)
	return e
}

func (e *SLCHECKBOXElement) IfINDETERMINATE(condition bool) *SLCHECKBOXElement {
	if condition {
		e.INDETERMINATESet(true)
	}
	return e
}

// Set the attribute INDETERMINATE to the value b explicitly.
func (e *SLCHECKBOXElement) INDETERMINATESet(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("indeterminate", b)
	return e
}

func (e *SLCHECKBOXElement) IfSetINDETERMINATE(condition bool, b bool) *SLCHECKBOXElement {
	if condition {
		e.INDETERMINATESet(b)
	}
	return e
}

// Remove the attribute INDETERMINATE from the element.
func (e *SLCHECKBOXElement) INDETERMINATERemove(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("indeterminate")
	return e
}

func (e *SLCHECKBOXElement) CHECKED() *SLCHECKBOXElement {
	e.CHECKEDSet(true)
	return e
}

func (e *SLCHECKBOXElement) IfCHECKED(condition bool) *SLCHECKBOXElement {
	if condition {
		e.CHECKEDSet(true)
	}
	return e
}

// Set the attribute CHECKED to the value b explicitly.
func (e *SLCHECKBOXElement) CHECKEDSet(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("checked", b)
	return e
}

func (e *SLCHECKBOXElement) IfSetCHECKED(condition bool, b bool) *SLCHECKBOXElement {
	if condition {
		e.CHECKEDSet(b)
	}
	return e
}

// Remove the attribute CHECKED from the element.
func (e *SLCHECKBOXElement) CHECKEDRemove(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("checked")
	return e
}

func (e *SLCHECKBOXElement) REQUIRED() *SLCHECKBOXElement {
	e.REQUIREDSet(true)
	return e
}

func (e *SLCHECKBOXElement) IfREQUIRED(condition bool) *SLCHECKBOXElement {
	if condition {
		e.REQUIREDSet(true)
	}
	return e
}

// Set the attribute REQUIRED to the value b explicitly.
func (e *SLCHECKBOXElement) REQUIREDSet(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		e.BoolAttributes = treemap.New[string, bool]()
	}
	e.BoolAttributes.Set("required", b)
	return e
}

func (e *SLCHECKBOXElement) IfSetREQUIRED(condition bool, b bool) *SLCHECKBOXElement {
	if condition {
		e.REQUIREDSet(b)
	}
	return e
}

// Remove the attribute REQUIRED from the element.
func (e *SLCHECKBOXElement) REQUIREDRemove(b bool) *SLCHECKBOXElement {
	if e.BoolAttributes == nil {
		return e
	}
	e.BoolAttributes.Del("required")
	return e
}

// Merges the store with the given object

func (e *SLCHECKBOXElement) DATASTAR_MERGE_STORE(v any) *SLCHECKBOXElement {
	if e.CustomDataAttributes == nil {
		e.CustomDataAttributes = treemap.New[string, string]()
	}
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	e.CustomDataAttributes.Set("data-merge-store", string(b))
	return e
}

// Sets the reference of the element

func (e *SLCHECKBOXElement) DATASTAR_REF(expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-ref"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_REF(condition bool, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_REF(expression)
	}
	return e
}

// Remove the attribute DATASTAR_REF from the element.
func (e *SLCHECKBOXElement) DATASTAR_REFRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-ref")
	return e
}

// Sets the value of the element

func (e *SLCHECKBOXElement) DATASTAR_BIND(key string, expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-bind-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_BIND(condition bool, key string, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_BIND(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_BIND from the element.
func (e *SLCHECKBOXElement) DATASTAR_BINDRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-bind")
	return e
}

// Sets the value of the element

func (e *SLCHECKBOXElement) DATASTAR_MODEL(expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-model"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_MODEL(condition bool, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_MODEL(expression)
	}
	return e
}

// Remove the attribute DATASTAR_MODEL from the element.
func (e *SLCHECKBOXElement) DATASTAR_MODELRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-model")
	return e
}

// Sets the textContent of the element

func (e *SLCHECKBOXElement) DATASTAR_TEXT(expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-text"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_TEXT(condition bool, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_TEXT(expression)
	}
	return e
}

// Remove the attribute DATASTAR_TEXT from the element.
func (e *SLCHECKBOXElement) DATASTAR_TEXTRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-text")
	return e
}

// Sets the event handler of the element

type SLCheckboxDataOnMod customDataKeyModifier

// Debounces the event handler
func SLCheckboxDataOnModDebounce(
	d time.Duration,
) SLCheckboxDataOnMod {
	return func() string {
		return fmt.Sprintf("debounce_%dms", d.Milliseconds())
	}
}

// Throttles the event handler
func SLCheckboxDataOnModThrottle(
	d time.Duration,
) SLCheckboxDataOnMod {
	return func() string {
		return fmt.Sprintf("throttle_%dms", d.Milliseconds())
	}
}

func (e *SLCHECKBOXElement) DATASTAR_ON(key string, expression string, modifiers ...SLCheckboxDataOnMod) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-on-%s", key)

	customMods := lo.Map(modifiers, func(m SLCheckboxDataOnMod, i int) customDataKeyModifier {
		return customDataKeyModifier(m)
	})
	key = customDataKey(key, customMods...)
	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_ON(condition bool, key string, expression string, modifiers ...SLCheckboxDataOnMod) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_ON(key, expression, modifiers...)
	}
	return e
}

// Remove the attribute DATASTAR_ON from the element.
func (e *SLCHECKBOXElement) DATASTAR_ONRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-on")
	return e
}

// Sets the focus of the element

func (e *SLCHECKBOXElement) DATASTAR_FOCUSSet(b bool) *SLCHECKBOXElement {
	key := "data-focus"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLCHECKBOXElement) DATASTAR_FOCUS() *SLCHECKBOXElement {
	return e.DATASTAR_FOCUSSet(true)
}

// Sets the header of for fetch requests

func (e *SLCHECKBOXElement) DATASTAR_HEADER(key string, expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-header-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_HEADER(condition bool, key string, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_HEADER(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_HEADER from the element.
func (e *SLCHECKBOXElement) DATASTAR_HEADERRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-header")
	return e
}

// Sets the URL for fetch requests

func (e *SLCHECKBOXElement) DATASTAR_FETCH_URL(expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-fetch-url"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_FETCH_URL(condition bool, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_FETCH_URL(expression)
	}
	return e
}

// Remove the attribute DATASTAR_FETCH_URL from the element.
func (e *SLCHECKBOXElement) DATASTAR_FETCH_URLRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-fetch-url")
	return e
}

// Sets the indicator selector for fetch requests

func (e *SLCHECKBOXElement) DATASTAR_FETCH_INDICATOR(expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "DatastarFetchIndicator"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_FETCH_INDICATOR(condition bool, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_FETCH_INDICATOR(expression)
	}
	return e
}

// Remove the attribute DATASTAR_FETCH_INDICATOR from the element.
func (e *SLCHECKBOXElement) DATASTAR_FETCH_INDICATORRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("DatastarFetchIndicator")
	return e
}

// Sets the visibility of the element

func (e *SLCHECKBOXElement) DATASTAR_SHOWSet(b bool) *SLCHECKBOXElement {
	key := "data-show"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLCHECKBOXElement) DATASTAR_SHOW() *SLCHECKBOXElement {
	return e.DATASTAR_SHOWSet(true)
}

// Triggers the callback when the element intersects the viewport

func (e *SLCHECKBOXElement) DATASTAR_INTERSECTS(expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key := "data-intersects"

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_INTERSECTS(condition bool, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_INTERSECTS(expression)
	}
	return e
}

// Remove the attribute DATASTAR_INTERSECTS from the element.
func (e *SLCHECKBOXElement) DATASTAR_INTERSECTSRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-intersects")
	return e
}

// Teleports the element to the given selector

func (e *SLCHECKBOXElement) DATASTAR_TELEPORTSet(b bool) *SLCHECKBOXElement {
	key := "data-teleport"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLCHECKBOXElement) DATASTAR_TELEPORT() *SLCHECKBOXElement {
	return e.DATASTAR_TELEPORTSet(true)
}

// Scrolls the element into view

func (e *SLCHECKBOXElement) DATASTAR_SCROLL_INTO_VIEWSet(b bool) *SLCHECKBOXElement {
	key := "data-scroll-into-view"
	e.BoolAttributes.Set(key, b)
	return e
}

func (e *SLCHECKBOXElement) DATASTAR_SCROLL_INTO_VIEW() *SLCHECKBOXElement {
	return e.DATASTAR_SCROLL_INTO_VIEWSet(true)
}

// Setup the ViewTransitionAPI for the element

func (e *SLCHECKBOXElement) DATASTAR_VIEW_TRANSITION(key string, expression string) *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		e.StringAttributes = treemap.New[string, string]()
	}

	key = fmt.Sprintf("data-view-transition-%s", key)

	e.StringAttributes.Set(key, expression)
	return e
}

func (e *SLCHECKBOXElement) IfDATASTAR_VIEW_TRANSITION(condition bool, key string, expression string) *SLCHECKBOXElement {
	if condition {
		e.DATASTAR_VIEW_TRANSITION(key, expression)
	}
	return e
}

// Remove the attribute DATASTAR_VIEW_TRANSITION from the element.
func (e *SLCHECKBOXElement) DATASTAR_VIEW_TRANSITIONRemove() *SLCHECKBOXElement {
	if e.StringAttributes == nil {
		return e
	}
	e.StringAttributes.Del("data-view-transition")
	return e
}
